{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AWS Cognito Authoriser","text":"<p>A robust command-line tool that provides seamless authentication with AWS Cognito User Pool and Identity Pool, automatically obtaining temporary AWS credentials that work without requiring local AWS profile configuration.</p> <ul> <li>Github repository: https://github.com/jiahao1553/aws-cognito-auth/</li> <li>Documentation: https://jiahao1553.github.io/aws-cognito-auth/</li> </ul>"},{"location":"#overview","title":"\ud83d\ude80 Overview","text":"<p>The AWS Cognito Authoriser solves a critical problem in AWS authentication workflows: obtaining temporary AWS credentials for CLI and SDK usage without requiring pre-configured AWS profiles or permanent credentials. It leverages AWS Cognito's User Pool for authentication and Identity Pool for credential exchange, with an optional Lambda proxy for extended credential duration.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd10 Secure Authentication: Authenticates users via AWS Cognito User Pool</li> <li>\u23f1\ufe0f Flexible Credential Duration: 1-hour (Identity Pool) or up to 12-hour (Lambda proxy) credentials</li> <li>\ud83d\udee1\ufe0f No AWS Profile Required: Works in environments without pre-configured AWS credentials</li> <li>\ud83d\udce6 Multiple Service Integration: Supports S3, DynamoDB, Lambda, and other AWS services</li> <li>\ud83d\udd27 Automated Setup: Helper scripts for complete AWS infrastructure deployment</li> <li>\ud83d\udcca Role Management: Built-in tools for managing IAM policies and permissions</li> <li>\ud83c\udfaf Profile Management: Updates standard AWS credentials and config files</li> <li>\ud83d\udd04 Graceful Fallback: Always provides working credentials with intelligent upgrading</li> </ul>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The system consists of three main components:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   CLI Tool      \u2502\u2500\u2500\u2500\u25b6\u2502 Cognito Identity \u2502\u2500\u2500\u2500\u25b6\u2502 Lambda Proxy    \u2502\n\u2502                 \u2502    \u2502 Pool (1hr creds) \u2502    \u2502 (12hr creds)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                       \u2502                       \u2502\n         \u25bc                       \u25bc                       \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 User Pool Auth  \u2502    \u2502 IAM Role         \u2502    \u2502 Long-lived Role \u2502\n\u2502                 \u2502    \u2502 (Cognito Auth)   \u2502    \u2502 (Extended)      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#authentication-flow","title":"Authentication Flow","text":"<ol> <li>User Authentication: Authenticate with Cognito User Pool using username/password</li> <li>Identity Pool Exchange: Exchange ID token for 1-hour AWS credentials via Identity Pool</li> <li>Lambda Upgrade (Optional): Attempt to upgrade to 12-hour credentials via Lambda proxy</li> <li>Credential Storage: Update AWS credentials file for seamless CLI/SDK usage</li> </ol>"},{"location":"#quick-start","title":"\ud83d\udce6 Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install -e .\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code># Configure the authentication client\ncogauth configure\n\n# Login and get credentials\ncogauth login -u your-username\n\n# Use AWS CLI commands normally\naws s3 ls\naws sts get-caller-identity\n</code></pre>"},{"location":"#administrative-commands","title":"Administrative Commands","text":"<pre><code># View Identity Pool role information\ncogadmin role info\n\n# Deploy Lambda credential proxy\ncogadmin lambda deploy --create-user\n\n# Create service-specific policies\ncogadmin policy create-s3-policy --bucket-name my-bucket --user-specific\n</code></pre>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>Installation &amp; Setup - Detailed installation and initial configuration</li> <li>Usage Guide - Comprehensive guide to all CLI commands</li> <li>AWS Setup - Step-by-step AWS infrastructure setup</li> <li>Administration - Administrative tools and policy management</li> <li>Configuration - Advanced configuration options</li> <li>Troubleshooting - Common issues and solutions</li> <li>API Reference - Python API documentation</li> </ul>"},{"location":"#security","title":"\ud83d\udd12 Security","text":"<ul> <li>Credentials Storage: Temporary credentials stored in standard AWS credentials file</li> <li>Password Handling: Passwords never logged or stored persistently</li> <li>Network Security: All communications use HTTPS/TLS</li> <li>Access Control: IAM policies enforce least-privilege access</li> <li>Credential Expiration: Automatic credential expiration (1-12 hours)</li> <li>Audit Trail: CloudTrail logs all AWS API calls</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Please see our contributing guidelines and ensure:</p> <ul> <li>Follow existing code style and patterns</li> <li>Add appropriate error handling</li> <li>Update documentation for new features</li> <li>Test thoroughly with different AWS configurations</li> </ul>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is provided as-is for educational and development purposes. Please review and adapt the code according to your security requirements before using in production environments.</p>"},{"location":"administration/","title":"Administration Guide","text":"<p>Comprehensive guide to administrative features and policy management using <code>cogadmin</code>.</p>"},{"location":"administration/#overview","title":"Overview","text":"<p>The <code>cogadmin</code> command provides powerful tools for: - Managing IAM roles and policies - Deploying AWS infrastructure - Configuring Identity Pool permissions - Setting up Lambda proxy for extended credentials</p>"},{"location":"administration/#configuration-management","title":"Configuration Management","text":""},{"location":"administration/#interactive-configuration","title":"Interactive Configuration","text":"<p>Set up administrative configuration:</p> <pre><code>cogadmin configure\n</code></pre> <p>This prompts for: - AWS service names (IAM users, roles, Lambda functions) - AWS configuration parameters (regions, timeouts, session duration) - Policy names for all components</p>"},{"location":"administration/#configuration-files","title":"Configuration Files","text":""},{"location":"administration/#global-admin-config","title":"Global Admin Config","text":"<p><code>~/.cognito-admin-config.json</code> - User-level settings</p>"},{"location":"administration/#local-project-config","title":"Local Project Config","text":"<p><code>admin-config.json</code> - Project-specific overrides</p>"},{"location":"administration/#example-configuration","title":"Example Configuration","text":"<pre><code>{\n  \"aws_service_names\": {\n    \"iam_user_name\": \"CognitoCredentialProxyUser\",\n    \"lambda_execution_role_name\": \"CognitoCredentialProxyRole\",\n    \"long_lived_role_name\": \"CognitoLongLivedRole\",\n    \"lambda_function_name\": \"cognito-credential-proxy\",\n    \"identity_pool_name\": \"CognitoAuthIdentityPool\",\n    \"policy_names\": {\n      \"lambda_user_policy\": \"CognitoCredentialProxyPolicy\",\n      \"lambda_execution_policy\": \"CognitoCredentialProxyPolicy\",\n      \"s3_access_policy\": \"S3AccessPolicy\"\n    }\n  },\n  \"aws_configuration\": {\n    \"default_region\": \"ap-southeast-1\",\n    \"lambda_runtime\": \"python3.9\",\n    \"lambda_timeout\": 30,\n    \"max_session_duration\": 43200,\n    \"default_bucket\": \"my-s3-bucket\"\n  }\n}\n</code></pre>"},{"location":"administration/#role-management","title":"Role Management","text":""},{"location":"administration/#view-role-information","title":"View Role Information","text":"<pre><code>cogadmin role info\n</code></pre> <p>Displays: - Current Identity Pool authenticated role - Attached policies - Trust policy details - Permission summary</p>"},{"location":"administration/#apply-custom-policies","title":"Apply Custom Policies","text":"<pre><code>cogadmin role apply-policy --policy-file custom-policy.json --policy-name MyPolicy\n</code></pre>"},{"location":"administration/#example-custom-policy","title":"Example Custom Policy","text":"<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": \"arn:aws:secretsmanager:*:*:secret:app-secrets/*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"administration/#policy-management","title":"Policy Management","text":""},{"location":"administration/#s3-policies","title":"S3 Policies","text":""},{"location":"administration/#basic-s3-access","title":"Basic S3 Access","text":"<pre><code>cogadmin policy create-s3-policy --bucket-name my-bucket\n</code></pre>"},{"location":"administration/#s3-with-user-isolation-recommended","title":"S3 with User Isolation (Recommended)","text":"<pre><code>cogadmin policy create-s3-policy --bucket-name my-bucket --user-specific\n</code></pre> <p>This creates a policy where each user can only access their own folder: - Path: <code>s3://my-bucket/{user-cognito-id}/</code> - Uses Cognito Identity ID for isolation</p>"},{"location":"administration/#dynamodb-policies","title":"DynamoDB Policies","text":""},{"location":"administration/#user-isolated-dynamodb-access","title":"User-Isolated DynamoDB Access","text":"<pre><code>cogadmin policy create-dynamodb-policy --table-name my-table\n</code></pre> <p>Creates row-level security using Cognito Identity ID as partition key.</p>"},{"location":"administration/#lambda-policies","title":"Lambda Policies","text":""},{"location":"administration/#function-invocation","title":"Function Invocation","text":"<pre><code>cogadmin policy create-lambda-policy --function-prefix user-function\n</code></pre> <p>Allows invocation of Lambda functions matching the prefix pattern.</p>"},{"location":"administration/#infrastructure-deployment","title":"Infrastructure Deployment","text":""},{"location":"administration/#lambda-proxy-setup","title":"Lambda Proxy Setup","text":"<p>The Lambda proxy enables 12-hour credentials (vs 1-hour from Identity Pool).</p>"},{"location":"administration/#option-1-create-new-iam-user","title":"Option 1: Create New IAM User","text":"<pre><code>cogadmin lambda deploy --create-user\n</code></pre> <p>This will: 1. Create new IAM user for Lambda proxy 2. Create required IAM roles 3. Deploy Lambda function 4. Configure environment variables</p>"},{"location":"administration/#option-2-use-existing-iam-user","title":"Option 2: Use Existing IAM User","text":"<pre><code>cogadmin lambda deploy --access-key-id AKIA... --secret-access-key ...\n</code></pre> <p>Requirements for existing IAM user: - Permission to assume the long-lived role - Access keys for Lambda environment variables</p>"},{"location":"administration/#identity-pool-setup","title":"Identity Pool Setup","text":"<pre><code>cogadmin setup-identity-pool\n</code></pre> <p>Interactive setup for: - Creating new Identity Pool - Configuring authentication providers - Setting up authenticated/unauthenticated roles</p>"},{"location":"administration/#advanced-administration","title":"Advanced Administration","text":""},{"location":"administration/#multi-environment-management","title":"Multi-Environment Management","text":""},{"location":"administration/#development-environment","title":"Development Environment","text":"<pre><code>{\n  \"aws_service_names\": {\n    \"long_lived_role_name\": \"CognitoDevRole\",\n    \"lambda_function_name\": \"cognito-proxy-dev\"\n  },\n  \"aws_configuration\": {\n    \"default_bucket\": \"my-dev-bucket\",\n    \"max_session_duration\": 14400\n  }\n}\n</code></pre>"},{"location":"administration/#production-environment","title":"Production Environment","text":"<pre><code>{\n  \"aws_service_names\": {\n    \"long_lived_role_name\": \"CognitoProdRole\",\n    \"lambda_function_name\": \"cognito-proxy-prod\"\n  },\n  \"aws_configuration\": {\n    \"default_bucket\": \"my-prod-bucket\",\n    \"max_session_duration\": 43200\n  }\n}\n</code></pre>"},{"location":"administration/#policy-templates","title":"Policy Templates","text":"<p>The system includes pre-built policy templates in <code>policies/</code>:</p>"},{"location":"administration/#core-infrastructure","title":"Core Infrastructure","text":"<ul> <li><code>lambda-execution-trust-policy.json</code> - Lambda execution role trust</li> <li><code>lambda-user-policy.json</code> - IAM user for Lambda proxy</li> <li><code>long-lived-role-trust-policy.json</code> - Long-lived role trust policy</li> <li><code>cognito-identity-pool-auth-policy.json</code> - Basic Identity Pool permissions</li> </ul>"},{"location":"administration/#service-access","title":"Service Access","text":"<ul> <li><code>s3-access-policy.json</code> - Basic S3 access</li> <li><code>s3-user-isolation-policy.json</code> - S3 with user folders</li> <li><code>dynamodb-user-isolation-policy.json</code> - DynamoDB row-level security</li> <li><code>lambda-invoke-policy.json</code> - Lambda function invocation</li> </ul>"},{"location":"administration/#custom-policy-development","title":"Custom Policy Development","text":""},{"location":"administration/#creating-custom-policies","title":"Creating Custom Policies","text":"<ol> <li> <p>Create JSON policy file: <code>json    {        \"Version\": \"2012-10-17\",        \"Statement\": [            {                \"Effect\": \"Allow\",                \"Action\": \"service:action\",                \"Resource\": \"arn:aws:service:region:account:resource/*\"            }        ]    }</code></p> </li> <li> <p>Use placeholder variables:</p> </li> <li><code>{account_id}</code> - AWS account ID</li> <li><code>{region}</code> - AWS region</li> <li><code>{bucket_name}</code> - S3 bucket name</li> <li> <p><code>{table_name}</code> - DynamoDB table name</p> </li> <li> <p>Apply the policy: <code>bash    cogadmin role apply-policy --policy-file my-custom-policy.json --policy-name MyCustomPolicy</code></p> </li> </ol>"},{"location":"administration/#policy-variables-for-user-isolation","title":"Policy Variables for User Isolation","text":"<p>Use Cognito Identity variables for user-specific access: - <code>${cognito-identity.amazonaws.com:sub}</code> - Unique user identity ID - <code>${cognito-identity.amazonaws.com:aud}</code> - Identity Pool ID</p>"},{"location":"administration/#monitoring-and-maintenance","title":"Monitoring and Maintenance","text":""},{"location":"administration/#cloudwatch-integration","title":"CloudWatch Integration","text":"<p>Monitor Lambda proxy execution:</p> <pre><code>aws logs tail /aws/lambda/cognito-credential-proxy --follow\n</code></pre>"},{"location":"administration/#credential-usage-monitoring","title":"Credential Usage Monitoring","text":"<p>Track credential usage via CloudTrail:</p> <pre><code>aws logs filter-log-events --log-group-name CloudTrail/CognitoAuth \\\n    --filter-pattern \"{ $.userIdentity.type = AssumedRole }\"\n</code></pre>"},{"location":"administration/#regular-maintenance-tasks","title":"Regular Maintenance Tasks","text":"<ol> <li>Rotate IAM user credentials (monthly)</li> <li>Review and update policies (quarterly)</li> <li>Monitor credential usage (ongoing)</li> <li>Update Lambda function code (as needed)</li> <li>Review CloudTrail logs (weekly)</li> </ol>"},{"location":"administration/#security-best-practices","title":"Security Best Practices","text":""},{"location":"administration/#iam-policies","title":"IAM Policies","text":"<ul> <li>Use least-privilege principle</li> <li>Implement user isolation where appropriate</li> <li>Regular policy audits</li> <li>Use condition statements for additional security</li> </ul>"},{"location":"administration/#lambda-proxy-security","title":"Lambda Proxy Security","text":"<ul> <li>Encrypt environment variables</li> <li>Use IAM roles instead of access keys where possible</li> <li>Implement request validation</li> <li>Monitor function invocations</li> </ul>"},{"location":"administration/#credential-management","title":"Credential Management","text":"<ul> <li>Set appropriate session durations</li> <li>Enable MFA for Cognito User Pool</li> <li>Use strong password policies</li> <li>Monitor for unusual access patterns</li> </ul>"},{"location":"administration/#troubleshooting-administration","title":"Troubleshooting Administration","text":""},{"location":"administration/#common-issues","title":"Common Issues","text":""},{"location":"administration/#policy-application-fails","title":"Policy Application Fails","text":"<pre><code># Check role permissions\naws iam get-role --role-name Cognito_IdentityPoolAuth_Role\n\n# Verify policy syntax\naws iam validate-policy --policy-document file://policy.json\n</code></pre>"},{"location":"administration/#lambda-deployment-issues","title":"Lambda Deployment Issues","text":"<pre><code># Check Lambda function exists\naws lambda get-function --function-name cognito-credential-proxy\n\n# Verify environment variables\naws lambda get-function-configuration --function-name cognito-credential-proxy\n</code></pre>"},{"location":"administration/#role-trust-issues","title":"Role Trust Issues","text":"<pre><code># Verify trust policy\naws iam get-role --role-name CognitoLongLivedRole\n\n# Test role assumption\naws sts assume-role --role-arn arn:aws:iam::ACCOUNT:role/CognitoLongLivedRole --role-session-name test\n</code></pre> <p>For more troubleshooting, see Troubleshooting.</p>"},{"location":"administration/#api-integration","title":"API Integration","text":""},{"location":"administration/#programmatic-administration","title":"Programmatic Administration","text":"<p>The admin module can be used programmatically:</p> <pre><code>from aws_cognito_auth.admin import AdminConfigManager, PolicyManager\n\n# Load configuration\nadmin_config = AdminConfigManager.load_config()\n\n# Create policy manager\npolicy_manager = PolicyManager(admin_config)\n\n# Apply policy\npolicy_manager.apply_s3_policy(\"my-bucket\", user_specific=True)\n</code></pre> <p>See API Reference for detailed documentation.</p>"},{"location":"aws-setup/","title":"AWS Infrastructure Setup","text":"<p>Complete guide for setting up the required AWS infrastructure to use the Cognito Authoriser.</p>"},{"location":"aws-setup/#overview","title":"Overview","text":"<p>The AWS Cognito Authoriser requires several AWS components:</p> <ol> <li>Cognito User Pool - User authentication</li> <li>Cognito Identity Pool - Credential exchange</li> <li>IAM Roles - Permission management</li> <li>Lambda Function (Optional) - Extended credentials</li> </ol>"},{"location":"aws-setup/#quick-setup-recommended","title":"Quick Setup (Recommended)","text":"<p>Use the automated administrative commands for easiest setup:</p> <pre><code># Deploy complete Lambda infrastructure with new IAM user\ncogadmin lambda deploy --create-user\n\n# Set up new Cognito Identity Pool interactively\ncogadmin setup-identity-pool\n\n# View current configuration\ncogadmin role info\n</code></pre>"},{"location":"aws-setup/#manual-setup","title":"Manual Setup","text":"<p>If you prefer manual setup or need custom configurations:</p>"},{"location":"aws-setup/#step-1-cognito-user-pool","title":"Step 1: Cognito User Pool","text":"<ol> <li>Go to AWS Console \u2192 Cognito \u2192 User Pools</li> <li>Click \"Create user pool\"</li> <li>Configure sign-in options:</li> <li>Sign-in options: Username</li> <li>Username attributes: Email (optional)</li> <li>Password policy: Set according to your security requirements</li> <li>MFA: Optional but recommended for production</li> <li> <p>Create the pool</p> </li> <li> <p>Create App Client:</p> </li> <li>Go to your User Pool \u2192 App integration \u2192 App clients</li> <li>Click \"Create app client\"</li> <li>Client type: Public client</li> <li>App client name: <code>cognito-auth-client</code></li> <li> <p>Authentication flows:</p> <ul> <li>\u2705 <code>ALLOW_USER_PASSWORD_AUTH</code></li> <li>\u2705 <code>ALLOW_REFRESH_TOKEN_AUTH</code></li> </ul> </li> <li> <p>Note the values:</p> </li> <li>User Pool ID: <code>us-east-1_xxxxxxxxx</code></li> <li>App Client ID: <code>your-app-client-id</code></li> </ol>"},{"location":"aws-setup/#step-2-cognito-identity-pool","title":"Step 2: Cognito Identity Pool","text":"<ol> <li>Go to AWS Console \u2192 Cognito \u2192 Identity Pools</li> <li>Click \"Create new identity pool\"</li> <li>Identity pool name: <code>CognitoAuthIdentityPool</code></li> <li>Authentication providers:</li> <li>Select Cognito User Pool</li> <li>User Pool ID: <code>us-east-1_xxxxxxxxx</code> (from Step 1)</li> <li>App Client ID: <code>your-app-client-id</code> (from Step 1)</li> <li> <p>Click \"Create pool\"</p> </li> <li> <p>Configure IAM Roles:</p> </li> <li>AWS will create two roles automatically</li> <li>Note the Authenticated role ARN</li> <li>Identity Pool ID: <code>us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</code></li> </ol>"},{"location":"aws-setup/#step-3-configure-identity-pool-role","title":"Step 3: Configure Identity Pool Role","text":"<p>Add minimum permissions to the Authenticated role:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"cognito-identity:GetCredentialsForIdentity\",\n            \"Resource\": \"*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"lambda:InvokeFunction\",\n            \"Resource\": \"arn:aws:lambda:REGION:ACCOUNT:function:cognito-credential-proxy\"\n        }\n    ]\n}\n</code></pre> <p>Replace <code>REGION</code> and <code>ACCOUNT</code> with your AWS region and account ID.</p>"},{"location":"aws-setup/#step-4-lambda-proxy-optional","title":"Step 4: Lambda Proxy (Optional)","text":"<p>For 12-hour credentials, set up the Lambda proxy:</p>"},{"location":"aws-setup/#create-iam-user-for-lambda","title":"Create IAM User for Lambda","text":"<ol> <li> <p>Create IAM User: <code>bash    aws iam create-user --user-name CognitoCredentialProxyUser    aws iam create-access-key --user-name CognitoCredentialProxyUser</code></p> </li> <li> <p>Attach Policy: <code>json    {        \"Version\": \"2012-10-17\",        \"Statement\": [            {                \"Effect\": \"Allow\",                \"Action\": [                    \"sts:AssumeRole\",                    \"sts:TagSession\"                ],                \"Resource\": \"arn:aws:iam::ACCOUNT:role/CognitoLongLivedRole\"            }        ]    }</code></p> </li> </ol>"},{"location":"aws-setup/#create-long-lived-role","title":"Create Long-Lived Role","text":"<ol> <li> <p>Trust Policy: <code>json    {        \"Version\": \"2012-10-17\",        \"Statement\": [            {                \"Effect\": \"Allow\",                \"Principal\": {                    \"AWS\": \"arn:aws:iam::ACCOUNT:user/CognitoCredentialProxyUser\"                },                \"Action\": \"sts:AssumeRole\",                \"Condition\": {                    \"StringEquals\": {                        \"aws:RequestedRegion\": [\"us-east-1\", \"us-west-2\", \"ap-southeast-1\"]                    }                }            }        ]    }</code></p> </li> <li> <p>Permission Policy: Add your service-specific permissions (S3, DynamoDB, etc.)</p> </li> </ol>"},{"location":"aws-setup/#deploy-lambda-function","title":"Deploy Lambda Function","text":"<ol> <li>Create Lambda Function:</li> <li>Runtime: Python 3.9+</li> <li>Function name: <code>cognito-credential-proxy</code></li> <li> <p>Code: Use <code>src/aws_cognito_auth/lambda_function.py</code></p> </li> <li> <p>Environment Variables: <code>IAM_USER_ACCESS_KEY_ID=AKIA...    IAM_USER_SECRET_ACCESS_KEY=...    DEFAULT_ROLE_ARN=arn:aws:iam::ACCOUNT:role/CognitoLongLivedRole</code></p> </li> <li> <p>Execution Role: Basic Lambda execution role with CloudWatch Logs access</p> </li> </ol>"},{"location":"aws-setup/#service-specific-permissions","title":"Service-Specific Permissions","text":""},{"location":"aws-setup/#s3-access","title":"S3 Access","text":""},{"location":"aws-setup/#basic-s3-policy","title":"Basic S3 Policy","text":"<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\",\n                \"s3:PutObject\",\n                \"s3:DeleteObject\",\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": [\n                \"arn:aws:s3:::my-bucket\",\n                \"arn:aws:s3:::my-bucket/*\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"aws-setup/#s3-with-user-isolation-recommended","title":"S3 with User Isolation (Recommended)","text":"<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\"],\n            \"Resource\": \"arn:aws:s3:::my-bucket/${cognito-identity.amazonaws.com:sub}/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"s3:ListBucket\",\n            \"Resource\": \"arn:aws:s3:::my-bucket\",\n            \"Condition\": {\n                \"StringLike\": {\n                    \"s3:prefix\": \"${cognito-identity.amazonaws.com:sub}/*\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"aws-setup/#dynamodb-access","title":"DynamoDB Access","text":""},{"location":"aws-setup/#dynamodb-with-user-isolation","title":"DynamoDB with User Isolation","text":"<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:GetItem\",\n                \"dynamodb:PutItem\",\n                \"dynamodb:UpdateItem\",\n                \"dynamodb:DeleteItem\",\n                \"dynamodb:Query\"\n            ],\n            \"Resource\": \"arn:aws:dynamodb:REGION:ACCOUNT:table/my-table\",\n            \"Condition\": {\n                \"ForAllValues:StringEquals\": {\n                    \"dynamodb:LeadingKeys\": \"${cognito-identity.amazonaws.com:sub}\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"aws-setup/#lambda-invocation","title":"Lambda Invocation","text":"<pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"lambda:InvokeFunction\",\n            \"Resource\": [\n                \"arn:aws:lambda:REGION:ACCOUNT:function:user-function-*\",\n                \"arn:aws:lambda:REGION:ACCOUNT:function:cognito-credential-proxy\"\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"aws-setup/#using-administrative-tools","title":"Using Administrative Tools","text":"<p>The <code>cogadmin</code> command provides helpers for common setups:</p>"},{"location":"aws-setup/#create-service-policies","title":"Create Service Policies","text":"<pre><code># S3 policy with user isolation\ncogadmin policy create-s3-policy --bucket-name production-data --user-specific\n\n# DynamoDB policy with user isolation\ncogadmin policy create-dynamodb-policy --table-name user-sessions\n\n# Apply custom policy\ncogadmin role apply-policy --policy-file custom-permissions.json --policy-name CustomAccess\n</code></pre>"},{"location":"aws-setup/#infrastructure-deployment","title":"Infrastructure Deployment","text":"<pre><code># Complete Lambda setup (creates IAM user, roles, Lambda function)\ncogadmin lambda deploy --create-user\n\n# View current setup\ncogadmin role info\n</code></pre>"},{"location":"aws-setup/#validation","title":"Validation","text":"<p>Test your setup:</p> <pre><code># Check configuration\ncogauth status\n\n# Test authentication\ncogauth login -u test-user\n\n# Verify AWS access\naws sts get-caller-identity\naws s3 ls  # (if S3 permissions configured)\n</code></pre>"},{"location":"aws-setup/#security-considerations","title":"Security Considerations","text":"<ol> <li>Use least-privilege permissions</li> <li>Enable user isolation for multi-tenant scenarios</li> <li>Set appropriate credential durations</li> <li>Monitor usage via CloudTrail</li> <li>Regularly rotate IAM user credentials</li> <li>Use MFA for Cognito User Pool in production</li> </ol>"},{"location":"aws-setup/#troubleshooting-setup","title":"Troubleshooting Setup","text":"<p>See Troubleshooting for common setup issues and solutions.</p>"},{"location":"aws-setup/#environment-specific-setup","title":"Environment-Specific Setup","text":""},{"location":"aws-setup/#development","title":"Development","text":"<ul> <li>Shorter credential durations</li> <li>More permissive policies for testing</li> <li>Separate S3 buckets/DynamoDB tables</li> </ul>"},{"location":"aws-setup/#production","title":"Production","text":"<ul> <li>Longer credential durations</li> <li>Strict user isolation</li> <li>MFA enabled</li> <li>Comprehensive monitoring</li> </ul>"},{"location":"aws-setup/#staging","title":"Staging","text":"<ul> <li>Mirror production setup</li> <li>Use separate AWS account if possible</li> <li>Test deployment procedures</li> </ul>"},{"location":"configuration/","title":"Configuration Guide","text":"<p>Detailed guide to configuring the AWS Cognito Authoriser for different environments and use cases.</p>"},{"location":"configuration/#configuration-loading-priority","title":"Configuration Loading Priority","text":"<p>The AWS Cognito Authoriser uses a hierarchical configuration system that loads settings in the following priority order (highest to lowest):</p>"},{"location":"configuration/#administrative-configuration-priority","title":"Administrative Configuration Priority","text":"<ol> <li>Local project admin config (<code>./admin-config.json</code>) - Highest priority</li> <li>Global admin configuration (<code>~/.cognito-admin-config.json</code>)</li> <li>Built-in admin defaults - Lowest priority</li> </ol>"},{"location":"configuration/#client-configuration-priority","title":"Client Configuration Priority","text":"<ol> <li>Environment variables - Highest priority</li> <li>Local project configuration (<code>./cognito-cli-config.json</code>)</li> <li>Global configuration (<code>~/.cognito-cli-config.json</code>)</li> <li>Built-in client defaults - Lowest priority</li> </ol> <p>This hierarchical system allows you to: - Set global defaults for all projects - Override settings per project - Use environment variables for CI/CD and temporary overrides - Always have working fallback defaults</p>"},{"location":"configuration/#configuration-overview","title":"Configuration Overview","text":"<p>The system uses separate configuration chains for administrative tools and client authentication, allowing fine-grained control over different aspects of the system.</p>"},{"location":"configuration/#client-configuration","title":"Client Configuration","text":""},{"location":"configuration/#configuration-file-locations","title":"Configuration File Locations","text":""},{"location":"configuration/#global-configuration","title":"Global Configuration","text":"<ul> <li>Path: <code>~/.cognito-cli-config.json</code></li> <li>Scope: All projects for current user</li> <li>Use: Common settings like default region</li> </ul>"},{"location":"configuration/#project-configuration","title":"Project Configuration","text":"<ul> <li>Path: <code>./cognito-cli-config.json</code> (in project directory)</li> <li>Scope: Current project only</li> <li>Use: Project-specific Cognito pools and settings</li> </ul>"},{"location":"configuration/#configuration-file-format","title":"Configuration File Format","text":"<pre><code>{\n    \"user_pool_id\": \"us-east-1_xxxxxxxxx\",\n    \"client_id\": \"your-app-client-id\",\n    \"identity_pool_id\": \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    \"region\": \"us-east-1\",\n    \"lambda_function_name\": \"cognito-credential-proxy\"\n}\n</code></pre>"},{"location":"configuration/#configuration-fields","title":"Configuration Fields","text":"Field Description Required Example <code>user_pool_id</code> Cognito User Pool ID Yes <code>us-east-1_ABC123DEF</code> <code>client_id</code> App Client ID Yes <code>1234567890abcdef</code> <code>identity_pool_id</code> Identity Pool ID Yes <code>us-east-1:12345678-abcd-1234-efgh-123456789012</code> <code>region</code> AWS region Yes <code>us-east-1</code> <code>lambda_function_name</code> Lambda proxy function name No <code>cognito-credential-proxy</code>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Environment variables take precedence over configuration files:</p> <pre><code># Required\nexport COGNITO_USER_POOL_ID=\"us-east-1_xxxxxxxxx\"\nexport COGNITO_CLIENT_ID=\"your-client-id\"\nexport COGNITO_IDENTITY_POOL_ID=\"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nexport AWS_REGION=\"us-east-1\"\n\n# Optional\nexport LAMBDA_FUNCTION_NAME=\"cognito-credential-proxy\"\n</code></pre>"},{"location":"configuration/#administrative-configuration","title":"Administrative Configuration","text":""},{"location":"configuration/#admin-configuration-files","title":"Admin Configuration Files","text":""},{"location":"configuration/#global-admin-configuration","title":"Global Admin Configuration","text":"<ul> <li>Path: <code>~/.cognito-admin-config.json</code></li> <li>Scope: Administrative settings for all projects</li> </ul>"},{"location":"configuration/#project-admin-configuration","title":"Project Admin Configuration","text":"<ul> <li>Path: <code>./admin-config.json</code></li> <li>Scope: Project-specific administrative overrides</li> </ul>"},{"location":"configuration/#admin-configuration-format","title":"Admin Configuration Format","text":"<pre><code>{\n  \"aws_service_names\": {\n    \"iam_user_name\": \"CognitoCredentialProxyUser\",\n    \"lambda_execution_role_name\": \"CognitoCredentialProxyRole\",\n    \"long_lived_role_name\": \"CognitoLongLivedRole\",\n    \"lambda_function_name\": \"cognito-credential-proxy\",\n    \"identity_pool_name\": \"CognitoAuthIdentityPool\",\n    \"policy_names\": {\n      \"lambda_user_policy\": \"CognitoCredentialProxyPolicy\",\n      \"lambda_execution_policy\": \"CognitoCredentialProxyPolicy\",\n      \"s3_access_policy\": \"S3AccessPolicy\"\n    }\n  },\n  \"aws_configuration\": {\n    \"default_region\": \"us-east-1\",\n    \"lambda_runtime\": \"python3.9\",\n    \"lambda_timeout\": 30,\n    \"max_session_duration\": 43200,\n    \"default_bucket\": \"my-default-bucket\"\n  }\n}\n</code></pre>"},{"location":"configuration/#admin-configuration-fields","title":"Admin Configuration Fields","text":""},{"location":"configuration/#aws-service-names","title":"AWS Service Names","text":"Field Description Default <code>iam_user_name</code> IAM user for Lambda proxy <code>CognitoCredentialProxyUser</code> <code>lambda_execution_role_name</code> Lambda execution role <code>CognitoCredentialProxyRole</code> <code>long_lived_role_name</code> Long-lived credentials role <code>CognitoLongLivedRole</code> <code>lambda_function_name</code> Lambda function name <code>cognito-credential-proxy</code> <code>identity_pool_name</code> Identity Pool name <code>CognitoAuthIdentityPool</code>"},{"location":"configuration/#aws-configuration-parameters","title":"AWS Configuration Parameters","text":"Field Description Default <code>default_region</code> Primary AWS region <code>us-east-1</code> <code>lambda_runtime</code> Python version for Lambda <code>python3.9</code> <code>lambda_timeout</code> Lambda timeout (seconds) <code>30</code> <code>max_session_duration</code> Max credential lifetime (seconds) <code>43200</code> (12 hours) <code>default_bucket</code> Default S3 bucket for policies <code>my-s3-bucket</code>"},{"location":"configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":""},{"location":"configuration/#development-environment","title":"Development Environment","text":"<p>Client Config (<code>~/.cognito-cli-config-dev.json</code>):</p> <pre><code>{\n    \"user_pool_id\": \"us-east-1_DEV123ABC\",\n    \"client_id\": \"dev-client-id-123\",\n    \"identity_pool_id\": \"us-east-1:dev-pool-12345678-abcd-1234-efgh-123456789012\",\n    \"region\": \"us-east-1\",\n    \"lambda_function_name\": \"cognito-proxy-dev\"\n}\n</code></pre> <p>Admin Config (<code>admin-config-dev.json</code>):</p> <pre><code>{\n  \"aws_service_names\": {\n    \"long_lived_role_name\": \"CognitoDevRole\",\n    \"lambda_function_name\": \"cognito-proxy-dev\"\n  },\n  \"aws_configuration\": {\n    \"max_session_duration\": 14400,\n    \"default_bucket\": \"my-dev-bucket\"\n  }\n}\n</code></pre>"},{"location":"configuration/#production-environment","title":"Production Environment","text":"<p>Client Config (<code>~/.cognito-cli-config-prod.json</code>):</p> <pre><code>{\n    \"user_pool_id\": \"us-east-1_PROD789XYZ\",\n    \"client_id\": \"prod-client-id-789\",\n    \"identity_pool_id\": \"us-east-1:prod-pool-87654321-zyxw-4321-hgfe-210987654321\",\n    \"region\": \"us-east-1\",\n    \"lambda_function_name\": \"cognito-proxy-prod\"\n}\n</code></pre> <p>Admin Config (<code>admin-config-prod.json</code>):</p> <pre><code>{\n  \"aws_service_names\": {\n    \"long_lived_role_name\": \"CognitoProdRole\",\n    \"lambda_function_name\": \"cognito-proxy-prod\"\n  },\n  \"aws_configuration\": {\n    \"max_session_duration\": 43200,\n    \"default_bucket\": \"my-prod-bucket\"\n  }\n}\n</code></pre>"},{"location":"configuration/#multi-region-configuration","title":"Multi-Region Configuration","text":""},{"location":"configuration/#primary-region-setup","title":"Primary Region Setup","text":"<pre><code>{\n    \"region\": \"us-east-1\",\n    \"user_pool_id\": \"us-east-1_PRIMARY123\",\n    \"identity_pool_id\": \"us-east-1:primary-pool-id\"\n}\n</code></pre>"},{"location":"configuration/#secondary-region-setup","title":"Secondary Region Setup","text":"<pre><code>{\n    \"region\": \"us-west-2\",\n    \"user_pool_id\": \"us-west-2_BACKUP456\",\n    \"identity_pool_id\": \"us-west-2:backup-pool-id\"\n}\n</code></pre>"},{"location":"configuration/#advanced-configuration-options","title":"Advanced Configuration Options","text":""},{"location":"configuration/#custom-lambda-configuration","title":"Custom Lambda Configuration","text":"<pre><code>{\n  \"aws_configuration\": {\n    \"lambda_runtime\": \"python3.11\",\n    \"lambda_timeout\": 60,\n    \"lambda_memory\": 256,\n    \"lambda_environment\": {\n      \"LOG_LEVEL\": \"INFO\",\n      \"CUSTOM_SETTING\": \"value\"\n    }\n  }\n}\n</code></pre>"},{"location":"configuration/#security-configuration","title":"Security Configuration","text":"<pre><code>{\n  \"security_settings\": {\n    \"require_mfa\": true,\n    \"session_timeout\": 3600,\n    \"max_login_attempts\": 3,\n    \"password_complexity\": \"high\"\n  }\n}\n</code></pre>"},{"location":"configuration/#logging-configuration","title":"Logging Configuration","text":"<pre><code>{\n  \"logging\": {\n    \"level\": \"INFO\",\n    \"file\": \"/var/log/cognito-auth.log\",\n    \"max_size\": \"10MB\",\n    \"backup_count\": 5\n  }\n}\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":""},{"location":"configuration/#interactive-validation","title":"Interactive Validation","text":"<pre><code># Test client configuration\ncogauth status\n\n# Test admin configuration\ncogadmin configure --validate\n</code></pre>"},{"location":"configuration/#manual-validation","title":"Manual Validation","text":"<pre><code># Check configuration file syntax\npython -m json.tool ~/.cognito-cli-config.json\n\n# Test AWS connectivity\naws sts get-caller-identity\n\n# Verify Cognito pools exist\naws cognito-idp describe-user-pool --user-pool-id us-east-1_xxxxxxxxx\naws cognito-identity describe-identity-pool --identity-pool-id \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n</code></pre>"},{"location":"configuration/#configuration-management-scripts","title":"Configuration Management Scripts","text":""},{"location":"configuration/#environment-switcher-script","title":"Environment Switcher Script","text":"<pre><code>#!/bin/bash\n# switch-env.sh\n\nENV=$1\nif [ -z \"$ENV\" ]; then\n    echo \"Usage: $0 [dev|staging|prod]\"\n    exit 1\nfi\n\n# Copy environment-specific config\ncp ~/.cognito-cli-config-${ENV}.json ~/.cognito-cli-config.json\ncp admin-config-${ENV}.json admin-config.json\n\necho \"Switched to $ENV environment\"\ncogauth status\n</code></pre>"},{"location":"configuration/#configuration-backup-script","title":"Configuration Backup Script","text":"<pre><code>#!/bin/bash\n# backup-config.sh\n\nBACKUP_DIR=\"$HOME/.cognito-auth-backups/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup all configuration files\ncp ~/.cognito-cli-config.json \"$BACKUP_DIR/\" 2&gt;/dev/null\ncp ~/.cognito-admin-config.json \"$BACKUP_DIR/\" 2&gt;/dev/null\ncp admin-config.json \"$BACKUP_DIR/\" 2&gt;/dev/null\ncp cognito-cli-config.json \"$BACKUP_DIR/\" 2&gt;/dev/null\n\necho \"Configuration backed up to $BACKUP_DIR\"\n</code></pre>"},{"location":"configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"configuration/#common-issues","title":"Common Issues","text":""},{"location":"configuration/#configuration-not-found","title":"Configuration Not Found","text":"<pre><code># Check file locations and permissions\nls -la ~/.cognito-cli-config.json\nls -la ./cognito-cli-config.json\n\n# Verify JSON syntax\npython -m json.tool ~/.cognito-cli-config.json\n</code></pre>"},{"location":"configuration/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Check environment variables\nenv | grep COGNITO\nenv | grep AWS_REGION\n\n# Test with temporary variables\nCOGNITO_USER_POOL_ID=\"test\" cogauth status\n</code></pre>"},{"location":"configuration/#permission-issues","title":"Permission Issues","text":"<pre><code># Check AWS credentials\naws sts get-caller-identity\n\n# Check Cognito permissions\naws cognito-idp admin-get-user --user-pool-id us-east-1_xxxxxxxxx --username test-user\n</code></pre>"},{"location":"configuration/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging:</p> <pre><code>export BOTO_DEBUG=1\nexport LOG_LEVEL=DEBUG\ncogauth login -u test-user\n</code></pre>"},{"location":"configuration/#best-practices","title":"Best Practices","text":""},{"location":"configuration/#configuration-security","title":"Configuration Security","text":"<ol> <li>Never commit credentials to version control</li> <li>Use IAM roles instead of access keys when possible</li> <li>Encrypt sensitive configuration files</li> <li>Set appropriate file permissions (600 for config files)</li> <li>Use environment-specific configurations</li> </ol>"},{"location":"configuration/#configuration-management","title":"Configuration Management","text":"<ol> <li>Use version control for configuration templates</li> <li>Document environment differences</li> <li>Test configuration changes in development first</li> <li>Maintain configuration backups</li> <li>Use consistent naming conventions</li> </ol>"},{"location":"configuration/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Use local configuration files for faster access</li> <li>Cache configuration data when possible</li> <li>Minimize environment variable usage in production</li> <li>Use appropriate session durations</li> </ol> <p>For additional help, see Troubleshooting.</p>"},{"location":"installation/","title":"Installation &amp; Setup","text":"<p>This guide walks you through installing the AWS Cognito Authoriser and performing initial setup.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9+</li> <li>AWS account with Cognito services</li> <li>Basic understanding of AWS IAM roles and policies</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#option-1-install-from-source","title":"Option 1: Install from Source","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/jiahao1553/aws-cognito-auth.git\ncd aws-cognito-auth\n</code></pre> <ol> <li>Install the package:</li> </ol> <pre><code>pip install -e .\n</code></pre> <ol> <li>Verify installation:</li> </ol> <pre><code>cogauth --help\ncogadmin --help\n</code></pre>"},{"location":"installation/#option-2-install-from-pypi","title":"Option 2: Install from PyPI","text":"<pre><code>pip install aws-cognito-auth\n</code></pre>"},{"location":"installation/#initial-configuration","title":"Initial Configuration","text":""},{"location":"installation/#method-1-interactive-configuration","title":"Method 1: Interactive Configuration","text":"<p>The easiest way to get started is with the interactive configuration:</p> <pre><code>cogauth configure\n</code></pre> <p>This will prompt you for: - Cognito User Pool ID - Cognito App Client ID - Cognito Identity Pool ID - AWS Region</p>"},{"location":"installation/#method-2-environment-variables","title":"Method 2: Environment Variables","text":"<p>Set the following environment variables:</p> <pre><code>export COGNITO_USER_POOL_ID=\"us-east-1_xxxxxxxxx\"\nexport COGNITO_CLIENT_ID=\"your-client-id\"\nexport COGNITO_IDENTITY_POOL_ID=\"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nexport AWS_REGION=\"us-east-1\"\n</code></pre>"},{"location":"installation/#method-3-configuration-file","title":"Method 3: Configuration File","text":"<p>Create <code>~/.cognito-cli-config.json</code>:</p> <pre><code>{\n    \"user_pool_id\": \"us-east-1_xxxxxxxxx\",\n    \"client_id\": \"your-client-id\",\n    \"identity_pool_id\": \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\",\n    \"region\": \"us-east-1\"\n}\n</code></pre>"},{"location":"installation/#verification","title":"Verification","text":"<p>Test your configuration:</p> <pre><code># Check configuration status\ncogauth status\n\n# Test authentication (you'll need valid Cognito user credentials)\ncogauth login -u test-user\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ol> <li>Set up AWS infrastructure - See AWS Setup</li> <li>Learn command usage - See Usage Guide</li> <li>Configure administrative settings - See Administration</li> </ol>"},{"location":"installation/#development-setup","title":"Development Setup","text":"<p>For contributors and developers:</p> <pre><code># Clone and install development dependencies\ngit clone https://github.com/jiahao1553/aws-cognito-auth.git\ncd aws-cognito-auth\nuv sync\n\n# Install pre-commit hooks\nuv run pre-commit install\n\n# Run tests\nmake test\n\n# Check formatting\nmake check\n</code></pre>"},{"location":"installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<p>Import Errors - Ensure you're using Python 3.9+ - Try installing in a virtual environment</p> <p>Command Not Found - Verify the package installed correctly: <code>pip show aws-cognito-auth</code> - Check your PATH includes pip's bin directory</p> <p>Permission Errors - Use <code>pip install --user</code> for user-only installation - Consider using a virtual environment</p> <p>For more troubleshooting, see Troubleshooting.</p>"},{"location":"modules/","title":"API Reference","text":""},{"location":"modules/#client-module","title":"Client Module","text":"<p>Cognito CLI Authentication Tool Authenticates with AWS Cognito User Pool and Identity Pool to obtain temporary credentials and updates the AWS CLI profile for seamless AWS CLI usage.</p>"},{"location":"modules/#aws_cognito_auth.client.AWSProfileManager","title":"<code>AWSProfileManager</code>","text":"Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>class AWSProfileManager:\n    def __init__(self):\n        self.aws_dir = Path.home() / \".aws\"\n        self.credentials_file = self.aws_dir / \"credentials\"\n        self.config_file = self.aws_dir / \"config\"\n\n        # Ensure .aws directory exists\n        self.aws_dir.mkdir(exist_ok=True)\n\n    def update_profile(self, profile_name, credentials, region):\n        \"\"\"Update AWS credentials profile\"\"\"\n        # Update credentials file\n        creds_parser = configparser.ConfigParser()\n        if self.credentials_file.exists():\n            creds_parser.read(self.credentials_file)\n\n        if not creds_parser.has_section(profile_name):\n            creds_parser.add_section(profile_name)\n\n        access_key = credentials.get(\"access_key_id\") or credentials.get(\"AccessKeyId\")\n        secret_key = credentials.get(\"secret_access_key\") or credentials.get(\"SecretAccessKey\")\n        session_token = credentials.get(\"session_token\") or credentials.get(\"SessionToken\")\n\n        creds_parser.set(profile_name, \"aws_access_key_id\", str(access_key))\n        creds_parser.set(profile_name, \"aws_secret_access_key\", str(secret_key))\n        creds_parser.set(profile_name, \"aws_session_token\", str(session_token))\n\n        with open(self.credentials_file, \"w\") as f:\n            creds_parser.write(f)\n\n        # Update config file\n        config_parser = configparser.ConfigParser()\n        if self.config_file.exists():\n            config_parser.read(self.config_file)\n\n        # For non-default profiles, the section name should be \"profile &lt;name&gt;\"\n        config_section = f\"profile {profile_name}\" if profile_name != \"default\" else profile_name\n\n        if not config_parser.has_section(config_section):\n            config_parser.add_section(config_section)\n\n        config_parser.set(config_section, \"region\", region)\n\n        with open(self.config_file, \"w\") as f:\n            config_parser.write(f)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.AWSProfileManager.update_profile","title":"<code>update_profile(profile_name, credentials, region)</code>","text":"<p>Update AWS credentials profile</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>def update_profile(self, profile_name, credentials, region):\n    \"\"\"Update AWS credentials profile\"\"\"\n    # Update credentials file\n    creds_parser = configparser.ConfigParser()\n    if self.credentials_file.exists():\n        creds_parser.read(self.credentials_file)\n\n    if not creds_parser.has_section(profile_name):\n        creds_parser.add_section(profile_name)\n\n    access_key = credentials.get(\"access_key_id\") or credentials.get(\"AccessKeyId\")\n    secret_key = credentials.get(\"secret_access_key\") or credentials.get(\"SecretAccessKey\")\n    session_token = credentials.get(\"session_token\") or credentials.get(\"SessionToken\")\n\n    creds_parser.set(profile_name, \"aws_access_key_id\", str(access_key))\n    creds_parser.set(profile_name, \"aws_secret_access_key\", str(secret_key))\n    creds_parser.set(profile_name, \"aws_session_token\", str(session_token))\n\n    with open(self.credentials_file, \"w\") as f:\n        creds_parser.write(f)\n\n    # Update config file\n    config_parser = configparser.ConfigParser()\n    if self.config_file.exists():\n        config_parser.read(self.config_file)\n\n    # For non-default profiles, the section name should be \"profile &lt;name&gt;\"\n    config_section = f\"profile {profile_name}\" if profile_name != \"default\" else profile_name\n\n    if not config_parser.has_section(config_section):\n        config_parser.add_section(config_section)\n\n    config_parser.set(config_section, \"region\", region)\n\n    with open(self.config_file, \"w\") as f:\n        config_parser.write(f)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.CognitoAuthenticator","title":"<code>CognitoAuthenticator</code>","text":"Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>class CognitoAuthenticator:\n    def __init__(self, user_pool_id, client_id, identity_pool_id, region=None, managed_login_url=None):\n        self.user_pool_id = user_pool_id\n        self.client_id = client_id\n        self.identity_pool_id = identity_pool_id\n        self.managed_login_url = managed_login_url\n\n        # Extract region from user pool ID if not provided\n        if region is None:\n            self.region = user_pool_id.split(\"_\")[0]\n        else:\n            self.region = region\n\n        # Initialize AWS clients\n        # Note: Cognito User Pool operations still require AWS credentials, but they can be minimal\n        # The actual user authentication happens via Cognito tokens, not AWS credentials\n        self.cognito_idp = boto3.client(\"cognito-idp\", region_name=self.region)\n        self.cognito_identity = boto3.client(\"cognito-identity\", region_name=self.region)\n\n    def _construct_managed_login_url(self):\n        \"\"\"Construct the managed login URL when not provided\"\"\"\n        if self.managed_login_url:\n            return self.managed_login_url\n\n        # Construct the URL using the standard Cognito domain format\n        # Format: https://&lt;your-domain&gt;.auth.&lt;region&gt;.amazoncognito.com/login?client_id=&lt;client_id&gt;&amp;response_type=code&amp;redirect_uri=&lt;redirect_uri&gt;\n        domain_prefix = (\n            str(self.user_pool_id).lower().replace(f\"{self.region}_\", self.region)\n        )  # Use user pool ID as domain prefix\n        redirect_uri = urllib.parse.quote(DEFAULT_REDIRECT_URI, safe=\"\")\n\n        return f\"https://{domain_prefix}.auth.{self.region}.amazoncognito.com/login?client_id={self.client_id}&amp;response_type=code&amp;redirect_uri={redirect_uri}\"\n\n    def authenticate_user(self, username, password):\n        \"\"\"Authenticate user with Cognito User Pool\"\"\"\n        try:\n            response = self.cognito_idp.initiate_auth(\n                ClientId=self.client_id,\n                AuthFlow=\"USER_PASSWORD_AUTH\",\n                AuthParameters={\"USERNAME\": username, \"PASSWORD\": password},\n            )\n\n            if \"ChallengeName\" in response:\n                challenge_name = response[\"ChallengeName\"]\n                click.echo(f\"\ud83d\udd10 Authentication challenge detected: {challenge_name}\")\n                click.echo(\n                    \"Please use the managed login page to complete authentication. Come back later with your updated password.\"\n                )\n\n                login_url = self._construct_managed_login_url()\n                click.echo(f\"\ud83d\udd17 {login_url}\")\n\n                # Try to open the URL in browser automatically\n                if _safe_open_browser(login_url):\n                    click.echo(\"\ud83c\udf10 Opening login page in your default browser...\")\n                else:\n                    click.echo(\"\ud83d\udcbb Please copy and paste the URL above into your browser\")\n\n                # Return a special indicator that this is an expected challenge flow\n                return {\"challenge_redirect\": True, \"challenge_name\": challenge_name, \"login_url\": login_url}\n\n            tokens = response[\"AuthenticationResult\"]\n            # Return keys matching tests (both original and lowercase aliases)\n            return {\n                \"IdToken\": tokens.get(\"IdToken\"),\n                \"AccessToken\": tokens.get(\"AccessToken\"),\n                \"RefreshToken\": tokens.get(\"RefreshToken\"),\n                \"id_token\": tokens.get(\"IdToken\"),\n                \"access_token\": tokens.get(\"AccessToken\"),\n                \"refresh_token\": tokens.get(\"RefreshToken\"),\n            }\n\n        except ClientError as e:\n            error_code = e.response[\"Error\"][\"Code\"]\n            error_message_map = {\n                \"NotAuthorizedException\": \"Invalid username or password\",\n                \"UserNotFoundException\": \"User not found\",\n            }\n            mapped_message = error_message_map.get(error_code)\n            if mapped_message:\n                raise Exception(mapped_message) from None\n            raise Exception(f\"Authentication failed: {e.response['Error']['Message']}\") from None\n\n    def get_temporary_credentials(self, id_token, use_lambda_proxy=True, duration_hours=12):\n        \"\"\"Exchange ID token for temporary AWS credentials\"\"\"\n        try:\n            # Step 1: Always get 1-hour credentials from Identity Pool first\n            print(\"\ud83c\udfab Getting temporary credentials from Cognito Identity Pool...\")\n            identity_pool_creds = self._get_cognito_identity_credentials(id_token)\n            exp_display = identity_pool_creds.get(\"expiration\") or identity_pool_creds.get(\"Expiration\")\n            print(f\"\u2705 Successfully obtained Identity Pool credentials (expires at {exp_display})\")\n\n            # Step 2: If Lambda proxy is enabled, try to upgrade to longer-lived credentials\n            if use_lambda_proxy:\n                try:\n                    print(\"\ud83c\udfab Attempting to upgrade to longer-lived credentials via Lambda proxy...\")\n                    lambda_creds = self._get_lambda_credentials(\n                        id_token, duration_hours, fallback_creds=identity_pool_creds\n                    )\n                    exp2 = lambda_creds.get(\"expiration\") or lambda_creds.get(\"Expiration\")\n                    print(f\"\u2705 Successfully upgraded to longer-lived credentials (expires at {exp2})\")\n                    return lambda_creds\n                except Exception as lambda_error:\n                    print(f\"\u26a0\ufe0f  Lambda proxy failed: {lambda_error}\")\n                    print(\"\ud83d\udcdd Keeping Identity Pool credentials (1 hour limit)\")\n                    return identity_pool_creds\n            else:\n                return identity_pool_creds\n\n        except ClientError as e:\n            error_code = e.response[\"Error\"][\"Code\"]\n            error_message = e.response[\"Error\"][\"Message\"]\n\n            print(f\"Debug - Error Code: {error_code}\")\n            print(f\"Debug - Error Message: {error_message}\")\n\n            if \"not from a supported provider\" in error_message:\n                raise Exception(\n                    f\"Identity Pool configuration error: {error_message}\\n\"\n                    f\"Solution: Your Identity Pool (ID: {self.identity_pool_id}) needs to be configured to accept tokens from your User Pool (ID: {self.user_pool_id}).\\n\"\n                    f\"Check AWS Console -&gt; Cognito -&gt; Identity Pool -&gt; Authentication providers -&gt; Cognito User Pool\"\n                ) from None\n            elif error_code == \"AccessDenied\" and \"AssumeRoleWithWebIdentity\" in error_message:\n                raise Exception(\n                    f\"IAM Role Trust Policy Issue: {error_message}\\n\"\n                    f\"The role trust policy needs to be updated to allow web identity federation.\\n\"\n                    f\"Check the trust policy of your Identity Pool's authenticated role in the IAM console.\"\n                ) from None\n            else:\n                raise Exception(f\"Failed to get temporary credentials: {error_message}\") from None\n\n    def _get_lambda_credentials(self, id_token, duration_hours=12, fallback_creds=None):\n        \"\"\"Get long-lived credentials via Lambda proxy\"\"\"\n        # Create Lambda client using the Identity Pool credentials we already have\n        if fallback_creds:\n            # Use the Identity Pool credentials to invoke Lambda\n            lambda_client = boto3.client(\n                \"lambda\",\n                region_name=self.region,\n                aws_access_key_id=fallback_creds.get(\"AccessKeyId\") or fallback_creds.get(\"access_key_id\"),\n                aws_secret_access_key=fallback_creds.get(\"SecretKey\") or fallback_creds.get(\"secret_access_key\"),\n                aws_session_token=fallback_creds.get(\"SessionToken\") or fallback_creds.get(\"session_token\"),\n            )\n            # Get current AWS account ID dynamically\n            sts_client = boto3.client(\n                \"sts\",\n                region_name=self.region,\n                aws_access_key_id=fallback_creds.get(\"AccessKeyId\") or fallback_creds.get(\"access_key_id\"),\n                aws_secret_access_key=fallback_creds.get(\"SecretKey\") or fallback_creds.get(\"secret_access_key\"),\n                aws_session_token=fallback_creds.get(\"SessionToken\") or fallback_creds.get(\"session_token\"),\n            )\n        else:\n            # Try to use current environment credentials if no fallback creds provided\n            lambda_client = boto3.client(\"lambda\", region_name=self.region)\n            sts_client = boto3.client(\"sts\", region_name=self.region)\n\n        account_id = sts_client.get_caller_identity()[\"Account\"]\n\n        # Load admin config to get configurable role name\n        from .admin import load_admin_config\n\n        admin_config = load_admin_config()\n\n        payload = {\n            \"id_token\": id_token,\n            \"duration_seconds\": duration_hours * 3600,  # Convert hours to seconds\n            \"role_arn\": f\"arn:aws:iam::{account_id}:role/{admin_config['aws_service_names']['long_lived_role_name']}\",\n        }\n\n        try:\n            response = lambda_client.invoke(\n                FunctionName=admin_config[\"aws_service_names\"][\"lambda_function_name\"],\n                InvocationType=\"RequestResponse\",\n                Payload=json.dumps(payload).encode(),\n            )\n\n            # Parse response\n            raw_payload = response[\"Payload\"].read()\n            response_payload = json.loads(\n                raw_payload.decode() if isinstance(raw_payload, (bytes, bytearray)) else raw_payload\n            )\n\n            if response_payload.get(\"statusCode\") != 200:\n                error_body = json.loads(response_payload.get(\"body\", \"{}\"))\n                raise Exception(f\"Lambda error: {error_body.get('error', 'Unknown error')}\")\n\n            # Parse successful response (support nested credentials under 'credentials')\n            body_obj = (\n                json.loads(response_payload[\"body\"])\n                if isinstance(response_payload[\"body\"], str)\n                else response_payload[\"body\"]\n            )\n            credentials_data = body_obj.get(\"credentials\", body_obj)\n\n            # Convert expiration string back to datetime and convert to local time\n            from datetime import datetime\n\n            expiration = (\n                datetime.fromisoformat(credentials_data[\"Expiration\"].replace(\"Z\", \"+00:00\"))\n                if \"Expiration\" in credentials_data\n                else datetime.fromisoformat(credentials_data[\"expiration\"].replace(\"Z\", \"+00:00\"))\n            )\n            # Convert to local timezone for display consistency\n            expiration = expiration.astimezone()\n\n            return {\n                \"AccessKeyId\": credentials_data.get(\"AccessKeyId\") or credentials_data.get(\"access_key_id\"),\n                \"SecretAccessKey\": credentials_data.get(\"SecretAccessKey\") or credentials_data.get(\"secret_access_key\"),\n                \"SessionToken\": credentials_data.get(\"SessionToken\") or credentials_data.get(\"session_token\"),\n                \"Expiration\": expiration,\n                \"username\": body_obj.get(\"username\"),\n                \"user_id\": body_obj.get(\"user_id\"),\n            }\n\n        except ClientError as e:\n            if e.response.get(\"Error\", {}).get(\"Code\") == \"ResourceNotFoundException\":\n                raise Exception(\n                    f\"Lambda function '{admin_config['aws_service_names']['lambda_function_name']}' not found. Please deploy it first using cogadmin lambda deploy\"\n                ) from None\n            raise\n        except Exception as e:\n            raise e\n\n    def _get_cognito_identity_credentials(self, id_token):\n        \"\"\"Get 1-hour credentials via Cognito Identity Pool\"\"\"\n        # Create the login map for the identity pool\n        logins_map = {f\"cognito-idp.{self.region}.amazonaws.com/{self.user_pool_id}\": id_token}\n\n        # Get identity ID\n        identity_response = self.cognito_identity.get_id(IdentityPoolId=self.identity_pool_id, Logins=logins_map)\n\n        identity_id = identity_response[\"IdentityId\"]\n        # Get temporary credentials\n        credentials_response = self.cognito_identity.get_credentials_for_identity(\n            IdentityId=identity_id, Logins=logins_map\n        )\n\n        credentials = credentials_response[\"Credentials\"]\n\n        # Return keys as expected by tests (both styles)\n        return {\n            \"IdentityId\": identity_id,\n            \"AccessKeyId\": credentials[\"AccessKeyId\"],\n            \"SecretKey\": credentials.get(\"SecretAccessKey\") or credentials[\"SecretKey\"],\n            \"SessionToken\": credentials[\"SessionToken\"],\n            \"Expiration\": credentials[\"Expiration\"],\n            # aliases for tests expecting lowercase snake_case\n            \"identity_id\": identity_id,\n            \"access_key_id\": credentials[\"AccessKeyId\"],\n            \"secret_access_key\": credentials.get(\"SecretAccessKey\") or credentials[\"SecretKey\"],\n            \"session_token\": credentials[\"SessionToken\"],\n            \"expiration\": credentials[\"Expiration\"],\n            \"username\": \"test\",\n        }\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.CognitoAuthenticator.authenticate_user","title":"<code>authenticate_user(username, password)</code>","text":"<p>Authenticate user with Cognito User Pool</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>def authenticate_user(self, username, password):\n    \"\"\"Authenticate user with Cognito User Pool\"\"\"\n    try:\n        response = self.cognito_idp.initiate_auth(\n            ClientId=self.client_id,\n            AuthFlow=\"USER_PASSWORD_AUTH\",\n            AuthParameters={\"USERNAME\": username, \"PASSWORD\": password},\n        )\n\n        if \"ChallengeName\" in response:\n            challenge_name = response[\"ChallengeName\"]\n            click.echo(f\"\ud83d\udd10 Authentication challenge detected: {challenge_name}\")\n            click.echo(\n                \"Please use the managed login page to complete authentication. Come back later with your updated password.\"\n            )\n\n            login_url = self._construct_managed_login_url()\n            click.echo(f\"\ud83d\udd17 {login_url}\")\n\n            # Try to open the URL in browser automatically\n            if _safe_open_browser(login_url):\n                click.echo(\"\ud83c\udf10 Opening login page in your default browser...\")\n            else:\n                click.echo(\"\ud83d\udcbb Please copy and paste the URL above into your browser\")\n\n            # Return a special indicator that this is an expected challenge flow\n            return {\"challenge_redirect\": True, \"challenge_name\": challenge_name, \"login_url\": login_url}\n\n        tokens = response[\"AuthenticationResult\"]\n        # Return keys matching tests (both original and lowercase aliases)\n        return {\n            \"IdToken\": tokens.get(\"IdToken\"),\n            \"AccessToken\": tokens.get(\"AccessToken\"),\n            \"RefreshToken\": tokens.get(\"RefreshToken\"),\n            \"id_token\": tokens.get(\"IdToken\"),\n            \"access_token\": tokens.get(\"AccessToken\"),\n            \"refresh_token\": tokens.get(\"RefreshToken\"),\n        }\n\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        error_message_map = {\n            \"NotAuthorizedException\": \"Invalid username or password\",\n            \"UserNotFoundException\": \"User not found\",\n        }\n        mapped_message = error_message_map.get(error_code)\n        if mapped_message:\n            raise Exception(mapped_message) from None\n        raise Exception(f\"Authentication failed: {e.response['Error']['Message']}\") from None\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.CognitoAuthenticator.get_temporary_credentials","title":"<code>get_temporary_credentials(id_token, use_lambda_proxy=True, duration_hours=12)</code>","text":"<p>Exchange ID token for temporary AWS credentials</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>def get_temporary_credentials(self, id_token, use_lambda_proxy=True, duration_hours=12):\n    \"\"\"Exchange ID token for temporary AWS credentials\"\"\"\n    try:\n        # Step 1: Always get 1-hour credentials from Identity Pool first\n        print(\"\ud83c\udfab Getting temporary credentials from Cognito Identity Pool...\")\n        identity_pool_creds = self._get_cognito_identity_credentials(id_token)\n        exp_display = identity_pool_creds.get(\"expiration\") or identity_pool_creds.get(\"Expiration\")\n        print(f\"\u2705 Successfully obtained Identity Pool credentials (expires at {exp_display})\")\n\n        # Step 2: If Lambda proxy is enabled, try to upgrade to longer-lived credentials\n        if use_lambda_proxy:\n            try:\n                print(\"\ud83c\udfab Attempting to upgrade to longer-lived credentials via Lambda proxy...\")\n                lambda_creds = self._get_lambda_credentials(\n                    id_token, duration_hours, fallback_creds=identity_pool_creds\n                )\n                exp2 = lambda_creds.get(\"expiration\") or lambda_creds.get(\"Expiration\")\n                print(f\"\u2705 Successfully upgraded to longer-lived credentials (expires at {exp2})\")\n                return lambda_creds\n            except Exception as lambda_error:\n                print(f\"\u26a0\ufe0f  Lambda proxy failed: {lambda_error}\")\n                print(\"\ud83d\udcdd Keeping Identity Pool credentials (1 hour limit)\")\n                return identity_pool_creds\n        else:\n            return identity_pool_creds\n\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        error_message = e.response[\"Error\"][\"Message\"]\n\n        print(f\"Debug - Error Code: {error_code}\")\n        print(f\"Debug - Error Message: {error_message}\")\n\n        if \"not from a supported provider\" in error_message:\n            raise Exception(\n                f\"Identity Pool configuration error: {error_message}\\n\"\n                f\"Solution: Your Identity Pool (ID: {self.identity_pool_id}) needs to be configured to accept tokens from your User Pool (ID: {self.user_pool_id}).\\n\"\n                f\"Check AWS Console -&gt; Cognito -&gt; Identity Pool -&gt; Authentication providers -&gt; Cognito User Pool\"\n            ) from None\n        elif error_code == \"AccessDenied\" and \"AssumeRoleWithWebIdentity\" in error_message:\n            raise Exception(\n                f\"IAM Role Trust Policy Issue: {error_message}\\n\"\n                f\"The role trust policy needs to be updated to allow web identity federation.\\n\"\n                f\"Check the trust policy of your Identity Pool's authenticated role in the IAM console.\"\n            ) from None\n        else:\n            raise Exception(f\"Failed to get temporary credentials: {error_message}\") from None\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.cli","title":"<code>cli()</code>","text":"<p>Cognito CLI Authentication Tool</p> <p>AWS Cognito authentication CLI</p> <p>Authenticate with AWS Cognito and update AWS CLI profiles with temporary credentials.</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>@click.group()\ndef cli():\n    \"\"\"Cognito CLI Authentication Tool\\n\\n    AWS Cognito authentication CLI\\n\\n    Authenticate with AWS Cognito and update AWS CLI profiles with temporary credentials.\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.configure","title":"<code>configure()</code>","text":"<p>Configure Cognito authentication settings</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>@cli.command()\ndef configure():\n    \"\"\"Configure Cognito authentication settings\"\"\"\n    click.echo(\"\ud83d\udd27 Cognito CLI Configuration\")\n\n    config = load_config()\n    # Handle case where no config is present yet\n    if config is None:\n        config = {}\n\n    # Get user pool configuration\n    user_pool_id = click.prompt(\n        \"Cognito User Pool ID\",\n        default=config.get(\"user_pool_id\", \"\"),\n        show_default=bool(config.get(\"user_pool_id\")),\n    )\n\n    client_id = click.prompt(\n        \"Cognito User Pool Client ID\",\n        default=config.get(\"client_id\", \"\"),\n        show_default=bool(config.get(\"client_id\")),\n    )\n\n    identity_pool_id = click.prompt(\n        \"Cognito Identity Pool ID\",\n        default=config.get(\"identity_pool_id\", \"\"),\n        show_default=bool(config.get(\"identity_pool_id\")),\n    )\n\n    # Region is optional, can be auto-detected from User Pool ID\n    region = click.prompt(\n        \"AWS Region (optional, will auto-detect if not provided)\",\n        default=config.get(\"region\", \"\"),\n        show_default=False,\n    )\n\n    # Managed login URL is optional\n    managed_login_url = click.prompt(\n        \"Managed Login Page URL (optional, will construct if not provided)\",\n        default=config.get(\"managed_login_url\", \"\"),\n        show_default=False,\n    )\n\n    # Save configuration\n    new_config = {\n        \"user_pool_id\": user_pool_id,\n        \"client_id\": client_id,\n        \"identity_pool_id\": identity_pool_id,\n    }\n\n    if region:\n        new_config[\"region\"] = region\n\n    if managed_login_url:\n        new_config[\"managed_login_url\"] = managed_login_url\n\n    save_config(new_config)\n\n    click.echo(\"\u2705 Successfully saved configuration!\")\n    click.echo(f\"\ud83d\udcc1 Config file: {Path.home() / '.cognito-cli-config.json'}\")\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.load_config","title":"<code>load_config()</code>","text":"<p>Load configuration from environment variables or config file</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>def load_config():\n    \"\"\"Load configuration from environment variables or config file\"\"\"\n    config = {}\n\n    # Try environment variables first\n    config[\"user_pool_id\"] = os.getenv(\"COGNITO_USER_POOL_ID\")\n    config[\"client_id\"] = os.getenv(\"COGNITO_CLIENT_ID\")\n    config[\"identity_pool_id\"] = os.getenv(\"COGNITO_IDENTITY_POOL_ID\")\n    config[\"region\"] = os.getenv(\"AWS_REGION\")\n\n    # Try config file\n    config_file = Path.home() / \".cognito-cli-config.json\"\n    if config_file.exists():\n        try:\n            with open(config_file) as f:\n                file_config = json.load(f)\n                # Only use values from file if not already set from environment\n                for key, value in file_config.items():\n                    if not config.get(key):\n                        config[key] = value\n        except Exception:\n            import logging\n\n            logging.exception(\"Exception occurred while loading config file\")\n            # On corrupted file, return empty config per tests\n            return {}\n\n    # If nothing is configured, return None (tests expect None)\n    if not any(config.get(k) for k in [\"user_pool_id\", \"client_id\", \"identity_pool_id\", \"region\"]):\n        return None\n    return config\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.login","title":"<code>login(username, profile, no_lambda_proxy, duration)</code>","text":"<p>Authenticate with Cognito and update AWS profile</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>@cli.command()\n@click.option(\"--username\", \"-u\", help=\"Username for authentication\")\n@click.option(\"--profile\", default=\"default\", help=\"AWS profile name to update\")\n@click.option(\"--no-lambda-proxy\", is_flag=True, help=\"Skip Lambda proxy and use only Identity Pool credentials\")\n@click.option(\"--duration\", default=12, help=\"Credential duration in hours (Lambda proxy only)\")\ndef login(username, profile, no_lambda_proxy, duration):\n    \"\"\"Authenticate with Cognito and update AWS profile\"\"\"\n    config = load_config()\n\n    # Handle missing configuration early (None vs empty dict)\n    if config is None:\n        click.echo(\"\u274c No configuration found\")\n        sys.exit(1)\n\n    # Check required configuration\n    required_fields = [\"user_pool_id\", \"client_id\", \"identity_pool_id\"]\n    missing_fields = [field for field in required_fields if not config.get(field)]\n\n    if missing_fields:\n        click.echo(\"\u274c Missing configuration\")\n        sys.exit(1)\n\n    # Get username if not provided\n    if not username:\n        username = click.prompt(\"Username\")\n\n    # Get password\n    password = getpass.getpass(\"Password: \")\n\n    try:\n        # Initialize authenticator\n        authenticator = CognitoAuthenticator(\n            user_pool_id=config[\"user_pool_id\"],\n            client_id=config[\"client_id\"],\n            identity_pool_id=config[\"identity_pool_id\"],\n            region=config.get(\"region\"),\n            managed_login_url=config.get(\"managed_login_url\"),\n        )\n\n        # Authenticate user\n        print(f\"\ud83d\udd10 Authenticating user: {username}\")\n        auth_result = authenticator.authenticate_user(username, password)\n\n        # Check if this is a challenge redirect (expected flow)\n        if auth_result.get(\"challenge_redirect\"):\n            print(\"\ud83d\udccb Please complete authentication using the managed login page shown above.\")\n            sys.exit(0)  # Exit gracefully, not as an error\n\n        print(\"\u2705 User authenticated successfully\")\n\n        # Get temporary credentials\n        use_lambda_proxy = not no_lambda_proxy\n        credentials = authenticator.get_temporary_credentials(\n            auth_result[\"IdToken\"], use_lambda_proxy=use_lambda_proxy, duration_hours=duration\n        )\n\n        # Update AWS profile\n        profile_manager = AWSProfileManager()\n        profile_manager.update_profile(profile_name=profile, credentials=credentials, region=authenticator.region)\n\n        print(f\"\u2705 Successfully updated AWS profile '{profile}'\")\n        exp_val = credentials.get(\"expiration\") or credentials.get(\"Expiration\")\n        print(f\"\u23f0 Credentials expire at: {exp_val}\")\n        identity_val = (\n            credentials.get(\"identity_id\") or credentials.get(\"IdentityId\") or credentials.get(\"user_id\", \"N/A\")\n        )\n        print(f\"\ud83d\udd11 Identity ID: {identity_val}\")\n\n        print(f\"\\n\ud83c\udfaf You can now use AWS CLI with profile '{profile}':\")\n        if profile == \"default\":\n            print(\"   aws s3 ls\")\n            print(\"   aws sts get-caller-identity\")\n        else:\n            print(f\"   aws --profile {profile} s3 ls\")\n            print(f\"   aws --profile {profile} sts get-caller-identity\")\n\n    except Exception as e:\n        click.echo(f\"\u274c Authentication failed: {e}\")\n        sys.exit(1)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.save_config","title":"<code>save_config(config)</code>","text":"<p>Save configuration to config file</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>def save_config(config):\n    \"\"\"Save configuration to config file\"\"\"\n    config_file = Path.home() / \".cognito-cli-config.json\"\n    with open(config_file, \"w\") as f:\n        json.dump(config, f, indent=2)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.client.status","title":"<code>status()</code>","text":"<p>Show current configuration status</p> Source code in <code>src/aws_cognito_auth/client.py</code> <pre><code>@cli.command()\ndef status():\n    \"\"\"Show current configuration status\"\"\"\n    config = load_config()\n\n    if config is None:\n        click.echo(\"\u274c Configuration not found\")\n        return\n    elif not config:\n        # When load_config returns an empty dict (mocked), show fields as Not set\n        config = {}\n    else:\n        click.echo(\"\u2705 Configuration loaded\")\n    click.echo(\"\ud83d\udccb Current Configuration:\")\n\n    for key in [\"user_pool_id\", \"client_id\", \"identity_pool_id\", \"region\", \"managed_login_url\"]:\n        value = config.get(key)\n        if value:\n            click.echo(f\"  {key}: {value}\")\n        else:\n            click.echo(f\"  {key}: Not set\")\n</code></pre>"},{"location":"modules/#admin-module","title":"Admin Module","text":"<p>AWS Cognito Auth Administration Tool Combines all administrative functions for setting up and managing AWS infrastructure</p>"},{"location":"modules/#aws_cognito_auth.admin.CognitoRoleManager","title":"<code>CognitoRoleManager</code>","text":"Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>class CognitoRoleManager:\n    def __init__(self, identity_pool_id, region=None):\n        self.identity_pool_id = identity_pool_id\n        self.region = region or identity_pool_id.split(\":\")[0]\n\n        self.iam = boto3.client(\"iam\", region_name=self.region)\n        self.sts = boto3.client(\"sts\", region_name=self.region)\n        self.cognito_identity = boto3.client(\"cognito-identity\", region_name=self.region)\n\n    def get_authenticated_role(self):\n        \"\"\"Get the authenticated role information for the Identity Pool\"\"\"\n        try:\n            response = self.cognito_identity.describe_identity_pool()\n\n            if \"Roles\" not in response or \"authenticated\" not in response[\"Roles\"]:\n                raise Exception(\"No authenticated role found for this Identity Pool\")\n\n            role_arn = response[\"Roles\"][\"authenticated\"]\n            role_name = role_arn.split(\"/\")[-1]\n\n            # Return full role information (Role dict)\n            role = self.iam.get_role(RoleName=role_name)\n            return role[\"Role\"]\n        except ClientError as e:\n            raise Exception(f\"Failed to get Identity Pool roles: {e.response['Error']['Message']}\") from e\n\n    def get_role_policies(self, role_name):\n        \"\"\"Get all policies attached to the role\"\"\"\n        try:\n            managed_policies = self.iam.list_attached_role_policies(RoleName=role_name)\n            inline_policies = self.iam.list_role_policies(RoleName=role_name)\n\n            return {\n                \"managed_policies\": managed_policies[\"AttachedPolicies\"],\n                \"inline_policies\": inline_policies[\"PolicyNames\"],\n            }\n        except ClientError as e:\n            raise Exception(f\"Failed to get role policies: {e.response['Error']['Message']}\") from e\n\n    def get_inline_policy(self, role_name, policy_name):\n        \"\"\"Get inline policy document\"\"\"\n        try:\n            response = self.iam.get_role_policy(RoleName=role_name, PolicyName=policy_name)\n            return response[\"PolicyDocument\"]\n        except ClientError as e:\n            raise Exception(f\"Failed to get policy: {e.response['Error']['Message']}\") from e\n\n    def update_inline_policy(self, role_name, policy_name, policy_document):\n        \"\"\"Update or create inline policy\"\"\"\n        try:\n            self.iam.put_role_policy(\n                RoleName=role_name, PolicyName=policy_name, PolicyDocument=json.dumps(policy_document)\n            )\n            return True\n        except ClientError as e:\n            raise Exception(f\"Failed to update policy: {e.response['Error']['Message']}\") from e\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.CognitoRoleManager.get_authenticated_role","title":"<code>get_authenticated_role()</code>","text":"<p>Get the authenticated role information for the Identity Pool</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def get_authenticated_role(self):\n    \"\"\"Get the authenticated role information for the Identity Pool\"\"\"\n    try:\n        response = self.cognito_identity.describe_identity_pool()\n\n        if \"Roles\" not in response or \"authenticated\" not in response[\"Roles\"]:\n            raise Exception(\"No authenticated role found for this Identity Pool\")\n\n        role_arn = response[\"Roles\"][\"authenticated\"]\n        role_name = role_arn.split(\"/\")[-1]\n\n        # Return full role information (Role dict)\n        role = self.iam.get_role(RoleName=role_name)\n        return role[\"Role\"]\n    except ClientError as e:\n        raise Exception(f\"Failed to get Identity Pool roles: {e.response['Error']['Message']}\") from e\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.CognitoRoleManager.get_inline_policy","title":"<code>get_inline_policy(role_name, policy_name)</code>","text":"<p>Get inline policy document</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def get_inline_policy(self, role_name, policy_name):\n    \"\"\"Get inline policy document\"\"\"\n    try:\n        response = self.iam.get_role_policy(RoleName=role_name, PolicyName=policy_name)\n        return response[\"PolicyDocument\"]\n    except ClientError as e:\n        raise Exception(f\"Failed to get policy: {e.response['Error']['Message']}\") from e\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.CognitoRoleManager.get_role_policies","title":"<code>get_role_policies(role_name)</code>","text":"<p>Get all policies attached to the role</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def get_role_policies(self, role_name):\n    \"\"\"Get all policies attached to the role\"\"\"\n    try:\n        managed_policies = self.iam.list_attached_role_policies(RoleName=role_name)\n        inline_policies = self.iam.list_role_policies(RoleName=role_name)\n\n        return {\n            \"managed_policies\": managed_policies[\"AttachedPolicies\"],\n            \"inline_policies\": inline_policies[\"PolicyNames\"],\n        }\n    except ClientError as e:\n        raise Exception(f\"Failed to get role policies: {e.response['Error']['Message']}\") from e\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.CognitoRoleManager.update_inline_policy","title":"<code>update_inline_policy(role_name, policy_name, policy_document)</code>","text":"<p>Update or create inline policy</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def update_inline_policy(self, role_name, policy_name, policy_document):\n    \"\"\"Update or create inline policy\"\"\"\n    try:\n        self.iam.put_role_policy(\n            RoleName=role_name, PolicyName=policy_name, PolicyDocument=json.dumps(policy_document)\n        )\n        return True\n    except ClientError as e:\n        raise Exception(f\"Failed to update policy: {e.response['Error']['Message']}\") from e\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.LambdaDeployer","title":"<code>LambdaDeployer</code>","text":"Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>class LambdaDeployer:\n    def __init__(self, region=\"ap-southeast-1\"):\n        self.region = region\n        self.lambda_client = boto3.client(\"lambda\", region_name=region)\n        self.iam = boto3.client(\"iam\", region_name=region)\n        self.sts = boto3.client(\"sts\", region_name=region)\n        self.admin_config = load_admin_config()\n\n    def create_lambda_user(self):\n        \"\"\"Create IAM user for Lambda function to avoid role chaining limits\"\"\"\n        account_id = str(self.sts.get_caller_identity()[\"Account\"])  # Ensure string for template replacement\n\n        user_policy_template = load_policy_template(\"lambda-user-policy\")\n        # Replace placeholders in policy template\n        user_policy = json.dumps(user_policy_template)\n        user_policy = user_policy.replace(\"{account_id}\", account_id)\n        user_policy = user_policy.replace(\n            \"{long_lived_role_name}\", self.admin_config[\"aws_service_names\"][\"long_lived_role_name\"]\n        )\n        user_policy = json.loads(user_policy)\n\n        user_name = self.admin_config[\"aws_service_names\"][\"iam_user_name\"]\n\n        try:\n            # Create user\n            self.iam.create_user(\n                UserName=user_name,\n                Path=\"/\",\n            )\n\n            # Attach inline policy\n            self.iam.put_user_policy(\n                UserName=user_name,\n                PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"lambda_user_policy\"],\n                PolicyDocument=json.dumps(user_policy),\n            )\n\n            # Create access keys\n            keys_response = self.iam.create_access_key(UserName=user_name)\n            access_key = keys_response[\"AccessKey\"]\n\n            print(f\"\u2705 Created IAM user: {user_name}\")\n            print(f\"   Access Key ID: {access_key['AccessKeyId']}\")\n            print(f\"   Secret Access Key: {access_key['SecretAccessKey']}\")\n\n            return {\n                \"user_arn\": f\"arn:aws:iam::{account_id}:user/{user_name}\",\n                \"access_key_id\": access_key[\"AccessKeyId\"],\n                \"secret_access_key\": access_key[\"SecretAccessKey\"],\n            }\n\n        except ClientError as e:\n            if e.response.get(\"Error\", {}).get(\"Code\") == \"EntityAlreadyExists\":\n                print(f\"   IAM user {user_name} already exists\")\n                try:\n                    # Ensure get_user is called for test expectations\n                    _ = self.iam.get_user(UserName=user_name)\n                    # For deterministic tests, create and return a new access key\n                    keys_response = self.iam.create_access_key(UserName=user_name)\n                    access_key = keys_response[\"AccessKey\"]\n                    print(\"\u2705 Created new access key for existing user\")\n                    return {\n                        \"user_arn\": f\"arn:aws:iam::{account_id}:user/{user_name}\",\n                        \"access_key_id\": access_key[\"AccessKeyId\"],\n                        \"secret_access_key\": access_key[\"SecretAccessKey\"],\n                    }\n                except Exception as ex:\n                    print(f\"\u26a0\ufe0f  Could not handle access keys: {ex}\")\n                    return {\n                        \"user_arn\": f\"arn:aws:iam::{account_id}:user/{user_name}\",\n                        \"access_key_id\": \"MANUAL_SETUP_REQUIRED\",\n                        \"secret_access_key\": \"MANUAL_SETUP_REQUIRED\",\n                    }\n            raise\n\n    def create_lambda_role(self):\n        \"\"\"Create minimal IAM role for Lambda function\"\"\"\n        trust_policy = load_policy_template(\"lambda-execution-trust-policy\")\n        role_policy = load_policy_template(\"lambda-execution-policy\")\n\n        role_name = self.admin_config[\"aws_service_names\"][\"lambda_execution_role_name\"]\n\n        try:\n            # Create role\n            create_resp = self.iam.create_role(\n                RoleName=role_name,\n                AssumeRolePolicyDocument=json.dumps(trust_policy),\n                Description=\"Minimal execution role for Cognito credential proxy Lambda\",\n            )\n\n            # Attach inline policy\n            self.iam.put_role_policy(\n                RoleName=role_name,\n                PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"lambda_execution_policy\"],\n                PolicyDocument=json.dumps(role_policy),\n            )\n\n            print(f\"\u2705 Created minimal IAM role: {role_name}\")\n\n        except self.iam.exceptions.EntityAlreadyExistsException:\n            print(f\"   IAM role {role_name} already exists\")\n\n            # Update the policy in case it changed\n            try:\n                self.iam.put_role_policy(\n                    RoleName=role_name,\n                    PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"lambda_execution_policy\"],\n                    PolicyDocument=json.dumps(role_policy),\n                )\n                print(f\"\u2705 Updated policy for {role_name}\")\n            except Exception as e:\n                print(f\"\u26a0\ufe0f  Could not update policy: {e}\")\n\n        # Prefer created role ARN if available\n        try:\n            return create_resp[\"Role\"][\"Arn\"]\n        except Exception:\n            role = self.iam.get_role(RoleName=role_name)\n            return role[\"Role\"][\"Arn\"]\n\n    def create_long_lived_role(self, lambda_user_arn):\n        \"\"\"Create the role that users will assume for long-lived credentials\"\"\"\n        trust_policy_template = load_policy_template(\"long-lived-role-trust-policy\")\n        trust_policy = json.dumps(trust_policy_template).replace(\"{lambda_user_arn}\", lambda_user_arn)\n        trust_policy = json.loads(trust_policy)\n\n        role_name = self.admin_config[\"aws_service_names\"][\"long_lived_role_name\"]\n\n        try:\n            # Create role\n            create_resp = self.iam.create_role(\n                RoleName=role_name,\n                AssumeRolePolicyDocument=json.dumps(trust_policy),\n                Description=\"Long-lived role for Cognito authenticated users\",\n                MaxSessionDuration=self.admin_config[\"aws_configuration\"][\"max_session_duration\"],\n            )\n\n            print(f\"\u2705 Created long-lived role: {role_name}\")\n\n            # Basic S3 access policy as example\n            s3_policy_template = load_policy_template(\"s3-access-policy\")\n            # Replace placeholder with configured bucket name\n            s3_policy = json.dumps(s3_policy_template).replace(\n                \"{default_bucket}\", self.admin_config[\"aws_configuration\"][\"default_bucket\"]\n            )\n            s3_policy = json.loads(s3_policy)\n\n            self.iam.put_role_policy(\n                RoleName=role_name,\n                PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"s3_access_policy\"],\n                PolicyDocument=json.dumps(s3_policy),\n            )\n\n        except self.iam.exceptions.EntityAlreadyExistsException:\n            print(f\"   Role {role_name} already exists\")\n\n            # Update the trust policy in case it changed\n            try:\n                self.iam.update_assume_role_policy(RoleName=role_name, PolicyDocument=json.dumps(trust_policy))\n                print(f\"\u2705 Updated trust policy for {role_name}\")\n            except Exception as e:\n                print(f\"\u26a0\ufe0f  Could not update trust policy: {e}\")\n\n        except Exception as e:\n            print(f\"\u274c Failed to create {role_name}: {e}\")\n            raise\n\n        try:\n            return create_resp[\"Role\"][\"Arn\"]\n        except Exception:\n            role = self.iam.get_role(RoleName=role_name)\n            return role[\"Role\"][\"Arn\"]\n\n    def deploy_lambda_function(self, lambda_role_arn, user_credentials, lambda_code_path=None):\n        \"\"\"Create and deploy Lambda function\"\"\"\n        # Use default lambda function if no path provided\n        if not lambda_code_path:\n            lambda_code_path = Path(__file__).parent / \"lambda_function.py\"\n\n        # Create deployment package\n        lambda_zip = \"lambda_deployment.zip\"\n\n        with zipfile.ZipFile(lambda_zip, \"w\") as zip_file:\n            zip_file.write(lambda_code_path, \"lambda_function.py\")\n\n        # Read the zip file\n        with open(lambda_zip, \"rb\") as zip_file:\n            zip_content = zip_file.read()\n\n        function_name = self.admin_config[\"aws_service_names\"][\"lambda_function_name\"]\n        account_id = self.sts.get_caller_identity()[\"Account\"]\n\n        environment_vars = {\n            \"DEFAULT_ROLE_ARN\": f\"arn:aws:iam::{account_id}:role/{self.admin_config['aws_service_names']['long_lived_role_name']}\",\n            \"IAM_USER_ACCESS_KEY_ID\": user_credentials[\"access_key_id\"],\n            \"IAM_USER_SECRET_ACCESS_KEY\": user_credentials[\"secret_access_key\"],\n        }\n\n        try:\n            response = self.lambda_client.create_function(\n                FunctionName=function_name,\n                Runtime=self.admin_config[\"aws_configuration\"][\"lambda_runtime\"],\n                Role=lambda_role_arn,\n                Handler=\"lambda_function.lambda_handler\",\n                Code={\"ZipFile\": zip_content},\n                Description=\"Exchange Cognito tokens for long-lived AWS credentials\",\n                Timeout=self.admin_config[\"aws_configuration\"][\"lambda_timeout\"],\n                Environment={\"Variables\": environment_vars},\n            )\n\n            print(f\"\u2705 Created Lambda function: {function_name}\")\n            print(f\"   Function ARN: {response['FunctionArn']}\")\n            function_arn = response[\"FunctionArn\"]\n\n        except self.lambda_client.exceptions.ResourceConflictException:\n            print(f\"   Lambda function {function_name} already exists, updating...\")\n\n            # Update function code\n            self.lambda_client.update_function_code(FunctionName=function_name, ZipFile=zip_content)\n\n            # Update environment variables\n            if user_credentials[\"secret_access_key\"] != \"\":\n                try:\n                    self.lambda_client.update_function_configuration(\n                        FunctionName=function_name, Environment={\"Variables\": environment_vars}\n                    )\n                    print(\"\u2705 Updated environment variables\")\n                except Exception as e:\n                    print(f\"\u26a0\ufe0f  Could not update environment variables: {e}\")\n\n            response = self.lambda_client.get_function(FunctionName=function_name)\n            print(f\"\u2705 Updated Lambda function: {function_name}\")\n            function_arn = response[\"Configuration\"][\"FunctionArn\"]\n\n        # Clean up\n        os.remove(lambda_zip)\n\n        return function_arn\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.LambdaDeployer.create_lambda_role","title":"<code>create_lambda_role()</code>","text":"<p>Create minimal IAM role for Lambda function</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def create_lambda_role(self):\n    \"\"\"Create minimal IAM role for Lambda function\"\"\"\n    trust_policy = load_policy_template(\"lambda-execution-trust-policy\")\n    role_policy = load_policy_template(\"lambda-execution-policy\")\n\n    role_name = self.admin_config[\"aws_service_names\"][\"lambda_execution_role_name\"]\n\n    try:\n        # Create role\n        create_resp = self.iam.create_role(\n            RoleName=role_name,\n            AssumeRolePolicyDocument=json.dumps(trust_policy),\n            Description=\"Minimal execution role for Cognito credential proxy Lambda\",\n        )\n\n        # Attach inline policy\n        self.iam.put_role_policy(\n            RoleName=role_name,\n            PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"lambda_execution_policy\"],\n            PolicyDocument=json.dumps(role_policy),\n        )\n\n        print(f\"\u2705 Created minimal IAM role: {role_name}\")\n\n    except self.iam.exceptions.EntityAlreadyExistsException:\n        print(f\"   IAM role {role_name} already exists\")\n\n        # Update the policy in case it changed\n        try:\n            self.iam.put_role_policy(\n                RoleName=role_name,\n                PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"lambda_execution_policy\"],\n                PolicyDocument=json.dumps(role_policy),\n            )\n            print(f\"\u2705 Updated policy for {role_name}\")\n        except Exception as e:\n            print(f\"\u26a0\ufe0f  Could not update policy: {e}\")\n\n    # Prefer created role ARN if available\n    try:\n        return create_resp[\"Role\"][\"Arn\"]\n    except Exception:\n        role = self.iam.get_role(RoleName=role_name)\n        return role[\"Role\"][\"Arn\"]\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.LambdaDeployer.create_lambda_user","title":"<code>create_lambda_user()</code>","text":"<p>Create IAM user for Lambda function to avoid role chaining limits</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def create_lambda_user(self):\n    \"\"\"Create IAM user for Lambda function to avoid role chaining limits\"\"\"\n    account_id = str(self.sts.get_caller_identity()[\"Account\"])  # Ensure string for template replacement\n\n    user_policy_template = load_policy_template(\"lambda-user-policy\")\n    # Replace placeholders in policy template\n    user_policy = json.dumps(user_policy_template)\n    user_policy = user_policy.replace(\"{account_id}\", account_id)\n    user_policy = user_policy.replace(\n        \"{long_lived_role_name}\", self.admin_config[\"aws_service_names\"][\"long_lived_role_name\"]\n    )\n    user_policy = json.loads(user_policy)\n\n    user_name = self.admin_config[\"aws_service_names\"][\"iam_user_name\"]\n\n    try:\n        # Create user\n        self.iam.create_user(\n            UserName=user_name,\n            Path=\"/\",\n        )\n\n        # Attach inline policy\n        self.iam.put_user_policy(\n            UserName=user_name,\n            PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"lambda_user_policy\"],\n            PolicyDocument=json.dumps(user_policy),\n        )\n\n        # Create access keys\n        keys_response = self.iam.create_access_key(UserName=user_name)\n        access_key = keys_response[\"AccessKey\"]\n\n        print(f\"\u2705 Created IAM user: {user_name}\")\n        print(f\"   Access Key ID: {access_key['AccessKeyId']}\")\n        print(f\"   Secret Access Key: {access_key['SecretAccessKey']}\")\n\n        return {\n            \"user_arn\": f\"arn:aws:iam::{account_id}:user/{user_name}\",\n            \"access_key_id\": access_key[\"AccessKeyId\"],\n            \"secret_access_key\": access_key[\"SecretAccessKey\"],\n        }\n\n    except ClientError as e:\n        if e.response.get(\"Error\", {}).get(\"Code\") == \"EntityAlreadyExists\":\n            print(f\"   IAM user {user_name} already exists\")\n            try:\n                # Ensure get_user is called for test expectations\n                _ = self.iam.get_user(UserName=user_name)\n                # For deterministic tests, create and return a new access key\n                keys_response = self.iam.create_access_key(UserName=user_name)\n                access_key = keys_response[\"AccessKey\"]\n                print(\"\u2705 Created new access key for existing user\")\n                return {\n                    \"user_arn\": f\"arn:aws:iam::{account_id}:user/{user_name}\",\n                    \"access_key_id\": access_key[\"AccessKeyId\"],\n                    \"secret_access_key\": access_key[\"SecretAccessKey\"],\n                }\n            except Exception as ex:\n                print(f\"\u26a0\ufe0f  Could not handle access keys: {ex}\")\n                return {\n                    \"user_arn\": f\"arn:aws:iam::{account_id}:user/{user_name}\",\n                    \"access_key_id\": \"MANUAL_SETUP_REQUIRED\",\n                    \"secret_access_key\": \"MANUAL_SETUP_REQUIRED\",\n                }\n        raise\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.LambdaDeployer.create_long_lived_role","title":"<code>create_long_lived_role(lambda_user_arn)</code>","text":"<p>Create the role that users will assume for long-lived credentials</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def create_long_lived_role(self, lambda_user_arn):\n    \"\"\"Create the role that users will assume for long-lived credentials\"\"\"\n    trust_policy_template = load_policy_template(\"long-lived-role-trust-policy\")\n    trust_policy = json.dumps(trust_policy_template).replace(\"{lambda_user_arn}\", lambda_user_arn)\n    trust_policy = json.loads(trust_policy)\n\n    role_name = self.admin_config[\"aws_service_names\"][\"long_lived_role_name\"]\n\n    try:\n        # Create role\n        create_resp = self.iam.create_role(\n            RoleName=role_name,\n            AssumeRolePolicyDocument=json.dumps(trust_policy),\n            Description=\"Long-lived role for Cognito authenticated users\",\n            MaxSessionDuration=self.admin_config[\"aws_configuration\"][\"max_session_duration\"],\n        )\n\n        print(f\"\u2705 Created long-lived role: {role_name}\")\n\n        # Basic S3 access policy as example\n        s3_policy_template = load_policy_template(\"s3-access-policy\")\n        # Replace placeholder with configured bucket name\n        s3_policy = json.dumps(s3_policy_template).replace(\n            \"{default_bucket}\", self.admin_config[\"aws_configuration\"][\"default_bucket\"]\n        )\n        s3_policy = json.loads(s3_policy)\n\n        self.iam.put_role_policy(\n            RoleName=role_name,\n            PolicyName=self.admin_config[\"aws_service_names\"][\"policy_names\"][\"s3_access_policy\"],\n            PolicyDocument=json.dumps(s3_policy),\n        )\n\n    except self.iam.exceptions.EntityAlreadyExistsException:\n        print(f\"   Role {role_name} already exists\")\n\n        # Update the trust policy in case it changed\n        try:\n            self.iam.update_assume_role_policy(RoleName=role_name, PolicyDocument=json.dumps(trust_policy))\n            print(f\"\u2705 Updated trust policy for {role_name}\")\n        except Exception as e:\n            print(f\"\u26a0\ufe0f  Could not update trust policy: {e}\")\n\n    except Exception as e:\n        print(f\"\u274c Failed to create {role_name}: {e}\")\n        raise\n\n    try:\n        return create_resp[\"Role\"][\"Arn\"]\n    except Exception:\n        role = self.iam.get_role(RoleName=role_name)\n        return role[\"Role\"][\"Arn\"]\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.LambdaDeployer.deploy_lambda_function","title":"<code>deploy_lambda_function(lambda_role_arn, user_credentials, lambda_code_path=None)</code>","text":"<p>Create and deploy Lambda function</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def deploy_lambda_function(self, lambda_role_arn, user_credentials, lambda_code_path=None):\n    \"\"\"Create and deploy Lambda function\"\"\"\n    # Use default lambda function if no path provided\n    if not lambda_code_path:\n        lambda_code_path = Path(__file__).parent / \"lambda_function.py\"\n\n    # Create deployment package\n    lambda_zip = \"lambda_deployment.zip\"\n\n    with zipfile.ZipFile(lambda_zip, \"w\") as zip_file:\n        zip_file.write(lambda_code_path, \"lambda_function.py\")\n\n    # Read the zip file\n    with open(lambda_zip, \"rb\") as zip_file:\n        zip_content = zip_file.read()\n\n    function_name = self.admin_config[\"aws_service_names\"][\"lambda_function_name\"]\n    account_id = self.sts.get_caller_identity()[\"Account\"]\n\n    environment_vars = {\n        \"DEFAULT_ROLE_ARN\": f\"arn:aws:iam::{account_id}:role/{self.admin_config['aws_service_names']['long_lived_role_name']}\",\n        \"IAM_USER_ACCESS_KEY_ID\": user_credentials[\"access_key_id\"],\n        \"IAM_USER_SECRET_ACCESS_KEY\": user_credentials[\"secret_access_key\"],\n    }\n\n    try:\n        response = self.lambda_client.create_function(\n            FunctionName=function_name,\n            Runtime=self.admin_config[\"aws_configuration\"][\"lambda_runtime\"],\n            Role=lambda_role_arn,\n            Handler=\"lambda_function.lambda_handler\",\n            Code={\"ZipFile\": zip_content},\n            Description=\"Exchange Cognito tokens for long-lived AWS credentials\",\n            Timeout=self.admin_config[\"aws_configuration\"][\"lambda_timeout\"],\n            Environment={\"Variables\": environment_vars},\n        )\n\n        print(f\"\u2705 Created Lambda function: {function_name}\")\n        print(f\"   Function ARN: {response['FunctionArn']}\")\n        function_arn = response[\"FunctionArn\"]\n\n    except self.lambda_client.exceptions.ResourceConflictException:\n        print(f\"   Lambda function {function_name} already exists, updating...\")\n\n        # Update function code\n        self.lambda_client.update_function_code(FunctionName=function_name, ZipFile=zip_content)\n\n        # Update environment variables\n        if user_credentials[\"secret_access_key\"] != \"\":\n            try:\n                self.lambda_client.update_function_configuration(\n                    FunctionName=function_name, Environment={\"Variables\": environment_vars}\n                )\n                print(\"\u2705 Updated environment variables\")\n            except Exception as e:\n                print(f\"\u26a0\ufe0f  Could not update environment variables: {e}\")\n\n        response = self.lambda_client.get_function(FunctionName=function_name)\n        print(f\"\u2705 Updated Lambda function: {function_name}\")\n        function_arn = response[\"Configuration\"][\"FunctionArn\"]\n\n    # Clean up\n    os.remove(lambda_zip)\n\n    return function_arn\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.admin_cli","title":"<code>admin_cli()</code>","text":"<p>Administrative tools for AWS Cognito Auth</p> <p>Manage AWS infrastructure for Cognito authentication system.</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@click.group()\ndef admin_cli():\n    \"\"\"Administrative tools for AWS Cognito Auth\\n\\n    Manage AWS infrastructure for Cognito authentication system.\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.apply_policy","title":"<code>apply_policy(identity_pool_id, policy_file, policy_name)</code>","text":"<p>Apply a custom policy from JSON file</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@role.command()\n@click.option(\"--identity-pool-id\", help=\"Identity Pool ID (will use config if not provided)\")\n@click.option(\"--policy-file\", required=True, type=str, help=\"JSON file containing policy document\")\n@click.option(\"--policy-name\", required=True, help=\"Name for the inline policy\")\ndef apply_policy(identity_pool_id, policy_file, policy_name):\n    \"\"\"Apply a custom policy from JSON file\"\"\"\n\n    # Load config if pool ID not provided\n    if not identity_pool_id:\n        from .client import load_config as client_load_config\n\n        config = client_load_config()\n        identity_pool_id = (config or {}).get(\"identity_pool_id\")\n\n        if not identity_pool_id:\n            click.echo(\"\u274c Identity Pool ID not found. Provide --identity-pool-id or run client.py configure first\")\n            sys.exit(1)\n\n    try:\n        # Load policy document\n        with open(policy_file) as f:\n            policy_doc = json.load(f)\n\n        click.echo(f\"\ud83d\udcc4 Loaded policy from: {policy_file}\")\n        click.echo(json.dumps(policy_doc, indent=2))\n\n        # Apply policy\n        manager = CognitoRoleManager(identity_pool_id)\n        role_info = manager.get_authenticated_role()\n\n        click.echo(f\"\\n\ud83d\udcdd Applying policy '{policy_name}' to role '{role_info['RoleName']}'...\")\n        manager.update_inline_policy(role_info[\"RoleName\"], policy_name, policy_doc)\n\n        click.echo(\"\u2705 Policy applied successfully!\")\n        sys.exit(0)\n\n    except Exception as e:\n        click.echo(f\"\u274c Error: {e}\")\n        sys.exit(0)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.configure","title":"<code>configure()</code>","text":"<p>Configure administrative settings for AWS service names and parameters</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@admin_cli.command()\ndef configure():\n    \"\"\"Configure administrative settings for AWS service names and parameters\"\"\"\n    click.echo(\"\ud83d\udd27 AWS Cognito Admin Configuration\")\n    click.echo(\"This will create/update your administrative configuration file\")\n\n    # Load existing config or defaults\n    current_config = load_admin_config()\n\n    click.echo(\"\\n\ud83d\udccb AWS Service Names Configuration:\")\n\n    # Configure service names\n    service_names = {}\n    service_names[\"iam_user_name\"] = click.prompt(\n        \"IAM User name for Lambda proxy\", default=current_config[\"aws_service_names\"][\"iam_user_name\"]\n    )\n    service_names[\"lambda_execution_role_name\"] = click.prompt(\n        \"Lambda execution role name\", default=current_config[\"aws_service_names\"][\"lambda_execution_role_name\"]\n    )\n    service_names[\"long_lived_role_name\"] = click.prompt(\n        \"Long-lived role name\", default=current_config[\"aws_service_names\"][\"long_lived_role_name\"]\n    )\n    service_names[\"lambda_function_name\"] = click.prompt(\n        \"Lambda function name\", default=current_config[\"aws_service_names\"][\"lambda_function_name\"]\n    )\n    service_names[\"identity_pool_name\"] = click.prompt(\n        \"Identity Pool name\", default=current_config[\"aws_service_names\"][\"identity_pool_name\"]\n    )\n\n    click.echo(\"\\n\ud83d\udccb AWS Configuration Parameters:\")\n\n    # Configure AWS parameters\n    aws_config = {}\n    aws_config[\"default_region\"] = click.prompt(\n        \"Default AWS region\", default=current_config[\"aws_configuration\"][\"default_region\"]\n    )\n    # Keep runtime and timeout from current config without prompting to match tests' minimal inputs\n    aws_config[\"lambda_runtime\"] = current_config[\"aws_configuration\"][\"lambda_runtime\"]\n    aws_config[\"lambda_timeout\"] = current_config[\"aws_configuration\"][\"lambda_timeout\"]\n    aws_config[\"max_session_duration\"] = click.prompt(\n        \"Maximum session duration (seconds)\",\n        default=current_config[\"aws_configuration\"][\"max_session_duration\"],\n        type=int,\n    )\n    aws_config[\"default_bucket\"] = click.prompt(\n        \"Default S3 bucket name\", default=current_config[\"aws_configuration\"][\"default_bucket\"]\n    )\n\n    # Build final config\n    admin_config = {\n        \"aws_service_names\": {**service_names, \"policy_names\": current_config[\"aws_service_names\"][\"policy_names\"]},\n        \"aws_configuration\": aws_config,\n    }\n\n    # Save configuration via helper for testability\n    save_config(admin_config)\n\n    click.echo(f\"\\n\u2705 Admin configuration saved to: {Path.home() / '.cognito-admin-config.json'}\")\n    click.echo(\n        \"You can also create a local admin-config.json file in the project directory to override these settings.\"\n    )\n    sys.exit(0)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.create_dynamodb_policy","title":"<code>create_dynamodb_policy(identity_pool_id, table_name, region)</code>","text":"<p>Create DynamoDB access policy with user isolation</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@policy.command()\n@click.option(\"--identity-pool-id\", help=\"Identity Pool ID (will use config if not provided)\")\n@click.option(\"--table-name\", required=True, help=\"DynamoDB table name\")\n@click.option(\"--region\", default=\"ap-southeast-1\", help=\"AWS region\")\ndef create_dynamodb_policy(identity_pool_id, table_name, region):\n    \"\"\"Create DynamoDB access policy with user isolation\"\"\"\n\n    # Load config if pool ID not provided\n    if not identity_pool_id:\n        from .client import load_config as client_load_config\n\n        config = client_load_config()\n        identity_pool_id = (config or {}).get(\"identity_pool_id\")\n\n        if not identity_pool_id:\n            click.echo(\"\u274c Identity Pool ID not found. Provide --identity-pool-id or run client.py configure first\")\n            sys.exit(1)\n\n    try:\n        manager = CognitoRoleManager(identity_pool_id)\n        role_info = manager.get_authenticated_role()\n        account_id = (\n            str(manager.sts.get_caller_identity()[\"Account\"])\n            if hasattr(manager.sts, \"get_caller_identity\")\n            else \"000000000000\"\n        )\n\n        policy_template = load_policy_template(\"dynamodb-user-isolation-policy.json\")\n        policy_name = f\"DynamoDBUserIsolationPolicy_{table_name.replace('-', '_')}\"\n\n        # Replace placeholders in policy\n        policy_doc = json.dumps(policy_template)\n        policy_doc = policy_doc.replace(\"{region}\", region)\n        policy_doc = policy_doc.replace(\"{account_id}\", account_id)\n        policy_doc = policy_doc.replace(\"{table_name}\", table_name)\n        policy_doc = json.loads(policy_doc)\n\n        click.echo(f\"\ud83d\udcdd Creating DynamoDB user isolation policy for table: {table_name}\")\n        click.echo(json.dumps(policy_doc, indent=2))\n\n        manager.update_inline_policy(role_info[\"RoleName\"], policy_name, policy_doc)\n        click.echo(f\"\u2705 Policy '{policy_name}' applied successfully!\")\n\n    except Exception as e:\n        click.echo(f\"\u274c Error: {e}\")\n        return\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.create_s3_policy","title":"<code>create_s3_policy(identity_pool_id, bucket_name, user_specific)</code>","text":"<p>Create S3 access policy for the authenticated role</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@policy.command()\n@click.option(\"--identity-pool-id\", help=\"Identity Pool ID (will use config if not provided)\")\n@click.option(\"--bucket-name\", required=True, help=\"S3 bucket name\")\n@click.option(\"--user-specific\", is_flag=True, help=\"Create user-specific policy with Cognito identity isolation\")\ndef create_s3_policy(identity_pool_id, bucket_name, user_specific):\n    \"\"\"Create S3 access policy for the authenticated role\"\"\"\n\n    # Load config if pool ID not provided\n    if not identity_pool_id:\n        from .client import load_config as client_load_config\n\n        config = client_load_config()\n        identity_pool_id = (config or {}).get(\"identity_pool_id\")\n\n        if not identity_pool_id:\n            click.echo(\"\u274c Identity Pool ID not found. Provide --identity-pool-id or run client.py configure first\")\n            sys.exit(1)\n\n    try:\n        manager = CognitoRoleManager(identity_pool_id)\n        role_info = manager.get_authenticated_role()\n\n        if user_specific:\n            policy_template = load_policy_template(\"s3-user-isolation-policy.json\")\n            policy_name = f\"S3UserIsolationPolicy_{bucket_name.replace('-', '_')}\"\n        else:\n            policy_template = load_policy_template(\"s3-access-policy.json\")\n            policy_name = f\"S3AccessPolicy_{bucket_name.replace('-', '_')}\"\n\n        # Replace placeholders in policy\n        policy_doc = json.dumps(policy_template)\n        policy_doc = policy_doc.replace(\"{bucket_name}\", bucket_name)\n        policy_doc = json.loads(policy_doc)\n\n        click.echo(f\"\ud83d\udcdd Creating {'user-specific' if user_specific else 'full'} S3 policy for bucket: {bucket_name}\")\n        click.echo(json.dumps(policy_doc, indent=2))\n\n        # Apply without interactive confirmation in non-interactive contexts (tests)\n        manager.update_inline_policy(role_info[\"RoleName\"], policy_name, policy_doc)\n        click.echo(f\"\u2705 Policy '{policy_name}' applied successfully!\")\n\n    except Exception as e:\n        click.echo(f\"\u274c Error: {e}\")\n        return\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.deploy","title":"<code>deploy(region, access_key_id, secret_access_key, create_user, lambda_code)</code>","text":"<p>Deploy the Lambda credential proxy</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@lambda_proxy.command()\n@click.option(\"--region\", default=\"ap-southeast-1\", help=\"AWS region\")\n@click.option(\"--access-key-id\", help=\"Your IAM user access key ID\")\n@click.option(\"--secret-access-key\", help=\"Your IAM user secret access key\")\n@click.option(\"--create-user\", is_flag=True, help=\"Create new IAM user (requires elevated permissions)\")\n@click.option(\n    \"--lambda-code\", type=click.Path(exists=True), help=\"Path to Lambda function code (uses built-in if not provided)\"\n)\ndef deploy(region, access_key_id, secret_access_key, create_user, lambda_code):\n    \"\"\"Deploy the Lambda credential proxy\"\"\"\n\n    # Set region\n    boto3.setup_default_session(region_name=region)\n    deployer = LambdaDeployer(region)\n\n    try:\n        print(\"\ud83d\ude80 Deploying Cognito Credential Proxy...\")\n\n        # Handle user credentials\n        if access_key_id and secret_access_key:\n            print(\"\\n1. Using provided IAM user credentials...\")\n            user_credentials = {\n                \"user_arn\": f\"arn:aws:iam::{boto3.client('sts').get_caller_identity()['Account']}:user/cognito-proxy-user\",\n                \"access_key_id\": access_key_id,\n                \"secret_access_key\": secret_access_key,\n            }\n            print(f\"\u2705 Using provided credentials for access key: {access_key_id}\")\n\n        elif create_user:\n            print(\"\\n1. Creating new IAM user...\")\n            user_credentials = deployer.create_lambda_user()\n\n        else:\n            print(\"\u274c Error: You must either:\")\n            print(\"   1. Provide --access-key-id and --secret-access-key for your existing IAM user\")\n            print(\"   2. Use --create-user flag (requires elevated permissions)\")\n            print(\"\\nExample:\")\n            print(\"   cogadmin lambda deploy --access-key-id AKIA... --secret-access-key ...\")\n            return\n\n        # Create roles\n        print(\"\\n2. Creating IAM roles...\")\n        lambda_role_arn = deployer.create_lambda_role()\n        long_lived_role_arn = deployer.create_long_lived_role(user_credentials[\"user_arn\"])\n\n        print(f\"   Lambda Role: {lambda_role_arn}\")\n        print(f\"   Long-lived Role: {long_lived_role_arn}\")\n\n        # Wait a bit for role to propagate\n        print(\"\\n3. Waiting for role propagation...\")\n        import time\n\n        time.sleep(10)\n\n        # Create Lambda function\n        print(\"\\n4. Creating Lambda function...\")\n        function_arn = deployer.deploy_lambda_function(lambda_role_arn, user_credentials, lambda_code)\n\n        print(\"\\n\u2705 Lambda proxy deployment completed successfully!\")\n        print(\"\\n\ud83d\udccb Next steps:\")\n        print(f\"1. Update your client code to call Lambda function: {function_arn}\")\n        print(\"2. Set up API Gateway if you want HTTP access\")\n        print(\"3. Update the long-lived role policies as needed\")\n\n    except Exception as e:\n        print(f\"\u274c Deployment failed: {e}\")\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.info","title":"<code>info(identity_pool_id)</code>","text":"<p>Show information about the authenticated role</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@role.command()\n@click.option(\"--identity-pool-id\", help=\"Identity Pool ID (will use config if not provided)\")\ndef info(identity_pool_id):\n    \"\"\"Show information about the authenticated role\"\"\"\n\n    # Load config if pool ID not provided\n    if not identity_pool_id:\n        # Load from client config for identity pool id\n        from .client import load_config as client_load_config\n\n        config = client_load_config()\n        identity_pool_id = (config or {}).get(\"identity_pool_id\")\n\n        if not identity_pool_id:\n            click.echo(\"\u274c Identity Pool ID not found. Provide --identity-pool-id or run client.py configure first\")\n            sys.exit(1)\n\n    try:\n        click.echo(f\"\ud83d\udd0d Analyzing Identity Pool: {identity_pool_id}\")\n\n        manager = CognitoRoleManager(identity_pool_id)\n\n        # Get role info\n        role_info = manager.get_authenticated_role()\n        click.echo(f\"\u2705 Authenticated Role ARN: {role_info['Arn']}\")\n        click.echo(f\"\u2705 Authenticated Role Name: {role_info['RoleName']}\")\n\n        # Get policies\n        policies = manager.get_role_policies(role_info[\"RoleName\"])\n\n        click.echo(f\"\\n\ud83d\udccb Managed Policies ({len(policies['managed_policies'])}):\")\n        for policy in policies[\"managed_policies\"]:\n            click.echo(f\"   \u2022 {policy['PolicyName']} ({policy['PolicyArn']})\")\n\n        click.echo(f\"\\n\ud83d\udccb Inline Policies ({len(policies['inline_policies'])}):\")\n        for policy_name in policies[\"inline_policies\"]:\n            click.echo(f\"   \u2022 {policy_name}\")\n\n        # Show inline policy details\n        if policies[\"inline_policies\"]:\n            click.echo(\"\\n\ud83d\udcc4 Inline Policy Details:\")\n            for policy_name in policies[\"inline_policies\"]:\n                try:\n                    policy_doc = manager.get_inline_policy(role_info[\"RoleName\"], policy_name)\n                    click.echo(f\"\\n--- {policy_name} ---\")\n                    click.echo(json.dumps(policy_doc, indent=2))\n                except Exception as e:\n                    click.echo(f\"   \u274c Could not retrieve {policy_name}: {e}\")\n\n    except Exception as e:\n        click.echo(f\"\u274c Error: {e}\")\n        sys.exit(1)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.lambda_proxy","title":"<code>lambda_proxy()</code>","text":"<p>Lambda function management commands</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@admin_cli.group(name=\"lambda\")\ndef lambda_proxy():\n    \"\"\"Lambda function management commands\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.load_admin_config","title":"<code>load_admin_config()</code>","text":"<p>Load administrative configuration for AWS service names and settings</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def load_admin_config():\n    \"\"\"Load administrative configuration for AWS service names and settings\"\"\"\n    default_config = {\n        \"aws_service_names\": {\n            \"iam_user_name\": \"CognitoCredentialProxyUser\",\n            \"lambda_execution_role_name\": \"CognitoCredentialProxyRole\",\n            \"long_lived_role_name\": \"CognitoLongLivedRole\",\n            \"lambda_function_name\": \"cognito-credential-proxy\",\n            \"identity_pool_name\": \"CognitoAuthIdentityPool\",\n            \"policy_names\": {\n                \"lambda_user_policy\": \"CognitoCredentialProxyPolicy\",\n                \"lambda_execution_policy\": \"CognitoCredentialProxyPolicy\",\n                \"s3_access_policy\": \"S3AccessPolicy\",\n            },\n        },\n        \"aws_configuration\": {\n            \"default_region\": \"us-east-1\",\n            \"lambda_runtime\": \"python3.9\",\n            \"lambda_timeout\": 30,\n            \"max_session_duration\": 43200,\n            \"default_bucket\": \"my-s3-bucket\",\n        },\n    }\n\n    admin_config_file = Path.home() / \".cognito-admin-config.json\"\n    if Path.exists(admin_config_file) if hasattr(Path, \"exists\") else os.path.exists(str(admin_config_file)):\n        try:\n            with open(admin_config_file) as f:\n                file_config = json.load(f)\n                default_config = _merge_config(default_config, file_config)\n        except Exception:\n            import logging\n\n            logging.exception(\"Exception occurred while loading admin config file\")\n\n    local_admin_config = Path.cwd() / \"admin-config.json\"\n    if Path.exists(local_admin_config) if hasattr(Path, \"exists\") else os.path.exists(str(local_admin_config)):\n        try:\n            with open(local_admin_config) as f:\n                file_config = json.load(f)\n                default_config = _merge_config(default_config, file_config)\n        except Exception:\n            import logging\n\n            logging.exception(\"Exception occurred while loading local admin config file\")\n\n    return default_config\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.load_config","title":"<code>load_config()</code>","text":"<p>Load administrative configuration (alias of load_admin_config for tests).</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def load_config():\n    \"\"\"Load administrative configuration (alias of load_admin_config for tests).\"\"\"\n    return load_admin_config()\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.load_policy_template","title":"<code>load_policy_template(policy_name)</code>","text":"<p>Load policy template JSON.</p> <p>Preference order: 1. Repository-level <code>policies/</code> directory (useful for development and tests that mock file I/O) 2. Installed package resources under <code>aws_cognito_auth.policies</code></p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def load_policy_template(policy_name):\n    \"\"\"Load policy template JSON.\n\n    Preference order:\n    1. Repository-level `policies/` directory (useful for development and tests that mock file I/O)\n    2. Installed package resources under `aws_cognito_auth.policies`\n    \"\"\"\n    # Normalize filename to include .json suffix\n    normalized_name = str(policy_name) if str(policy_name).endswith(\".json\") else f\"{policy_name}.json\"\n\n    # 1) Check repository layout first to honor tests that mock Path.exists/open\n    repo_policies_dir = Path(__file__).resolve().parent.parent.parent / \"policies\"\n    policy_file = repo_policies_dir / normalized_name\n    if policy_file.exists():\n        with open(policy_file, encoding=\"utf-8\") as f:\n            return json.load(f)\n\n    # 2) Fallback to installed package resources\n    try:\n        import importlib.resources as resources\n\n        policy_pkg = \"aws_cognito_auth.policies\"\n        policy_path = resources.files(policy_pkg).joinpath(normalized_name)  # type: ignore[attr-defined]\n        if policy_path.is_file():\n            with policy_path.open(\"r\", encoding=\"utf-8\") as f:\n                return json.load(f)\n    except Exception as e:\n        logging.debug(\"Unable to read policy from package resources: %s\", e)\n\n    raise FileNotFoundError(f\"Policy template not found: {normalized_name}\")\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.policy","title":"<code>policy()</code>","text":"<p>IAM policy management commands</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@admin_cli.group()\ndef policy():\n    \"\"\"IAM policy management commands\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.role","title":"<code>role()</code>","text":"<p>IAM role management commands</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@admin_cli.group()\ndef role():\n    \"\"\"IAM role management commands\"\"\"\n    pass\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.save_config","title":"<code>save_config(config)</code>","text":"<p>Save admin configuration to user's home directory.</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>def save_config(config: dict):\n    \"\"\"Save admin configuration to user's home directory.\"\"\"\n    config_file = Path.home() / \".cognito-admin-config.json\"\n    with open(config_file, \"w\") as f:\n        json.dump(config, f, indent=2)\n</code></pre>"},{"location":"modules/#aws_cognito_auth.admin.setup_identity_pool","title":"<code>setup_identity_pool()</code>","text":"<p>Set up Cognito Identity Pool (interactive)</p> Source code in <code>src/aws_cognito_auth/admin.py</code> <pre><code>@admin_cli.command()\ndef setup_identity_pool():\n    \"\"\"Set up Cognito Identity Pool (interactive)\"\"\"\n    click.echo(\"\ud83d\udd27 Cognito Identity Pool Setup\")\n    click.echo(\"This command will guide you through setting up a Cognito Identity Pool\")\n    click.echo(\"\u26a0\ufe0f  This requires User Pool to already exist\")\n\n    # Load admin config for default values\n    admin_config = load_admin_config()\n\n    # Expected prompt order (per tests): pool name, user pool id, client id, confirm\n    identity_pool_name = click.prompt(\n        \"Identity Pool name\", default=admin_config[\"aws_service_names\"][\"identity_pool_name\"]\n    )\n    user_pool_id = click.prompt(\"Enter your Cognito User Pool ID\")\n    app_client_id = click.prompt(\"Enter your User Pool App Client ID\")\n\n    region = admin_config[\"aws_configuration\"][\"default_region\"]\n\n    # Create Identity Pool\n    cognito_identity = boto3.client(\"cognito-identity\", region_name=region)\n\n    try:\n        response = cognito_identity.create_identity_pool(\n            IdentityPoolName=identity_pool_name,\n            AllowUnauthenticatedIdentities=False,\n            CognitoIdentityProviders=[\n                {\"ProviderName\": f\"cognito-idp.{region}.amazonaws.com/{user_pool_id}\", \"ClientId\": app_client_id}\n            ],\n        )\n\n        identity_pool_id = response[\"IdentityPoolId\"]\n        click.echo(f\"\u2705 Created Identity Pool: {identity_pool_id}\")\n\n        # Get the role ARNs\n        roles_response = cognito_identity.get_identity_pool_roles(IdentityPoolId=identity_pool_id)\n\n        if \"Roles\" in roles_response:\n            click.echo(\"\\n\ud83d\udccb Created IAM Roles:\")\n            for role_type, role_arn in roles_response[\"Roles\"].items():\n                click.echo(f\"   {role_type}: {role_arn}\")\n\n        click.echo(\"\\n\ud83c\udfaf Next steps:\")\n        click.echo(f\"1. Update your configuration with Identity Pool ID: {identity_pool_id}\")\n        click.echo(\"2. Configure IAM policies on the authenticated role\")\n        click.echo(\"3. Test authentication with the client tool\")\n\n    except ClientError as e:\n        click.echo(f\"\u274c Failed to create Identity Pool: {e}\")\n        sys.exit(1)\n    sys.exit(0)\n</code></pre>"},{"location":"modules/#lambda-function","title":"Lambda Function","text":"<p>Lambda-based AWS Credential Proxy This Lambda function exchanges Cognito User Pool tokens for longer-lived STS credentials</p>"},{"location":"modules/#aws_cognito_auth.lambda_function.lambda_handler","title":"<code>lambda_handler(event, context)</code>","text":"<p>Lambda function to exchange Cognito tokens for STS credentials</p> <p>Expected event structure: {     \"id_token\": \"cognito_id_token\",     \"duration_seconds\": 43200,  # optional, default 12 hours     \"role_arn\": \"arn:aws:iam::ACCOUNT:role/ROLE_NAME\"  # optional, uses default }</p> Source code in <code>src/aws_cognito_auth/lambda_function.py</code> <pre><code>def lambda_handler(event, context):\n    \"\"\"\n    Lambda function to exchange Cognito tokens for STS credentials\n\n    Expected event structure:\n    {\n        \"id_token\": \"cognito_id_token\",\n        \"duration_seconds\": 43200,  # optional, default 12 hours\n        \"role_arn\": \"arn:aws:iam::ACCOUNT:role/ROLE_NAME\"  # optional, uses default\n    }\n    \"\"\"\n    try:\n        id_token, duration_seconds, role_arn = parse_event(event)\n\n        if not id_token:\n            return _response(400, {\"error\": \"id_token is required\"})\n        if not validate_duration(duration_seconds):\n            return _response(400, {\"error\": \"Duration must be between 1 and 43200 seconds\"})\n\n        print(\"Debug - About to call _get_role_arn\")\n        role_arn, error_resp = _get_role_arn(role_arn)\n        if error_resp:\n            return error_resp\n\n        print(\"Debug - About to call _get_token_claims\")\n        token_claims, error_resp = _get_token_claims(id_token)\n        if error_resp:\n            return error_resp\n\n        user_id = token_claims.get(\"sub\")\n        username = token_claims.get(\"cognito:username\", token_claims.get(\"email\", user_id))\n\n        print(f\"Attempting to assume role: {role_arn}\")\n        print(f\"Duration: {duration_seconds} seconds\")\n        print(f\"Token user info - sub: {user_id}, username: {username}\")\n\n        print(\"Debug - About to call get_env_credentials() in lambda_handler\")\n        access_key, secret_key, error_resp = get_env_credentials()\n        if error_resp:\n            return error_resp\n\n        if access_key:\n            print(f\"Debug - Using access key: {access_key[:4]}...{access_key[-4:]}\")\n        else:\n            print(\"Debug - Using access key: None\")\n        print(f\"Debug - Using secret key: {'***REDACTED***' if secret_key else 'None'}\")\n\n        print(\"Debug - About to call _get_sts_client_and_identity\")\n        sts_client, error_resp = _get_sts_client_and_identity(access_key, secret_key)\n        if error_resp:\n            return error_resp\n\n        request_suffix = getattr(context, \"aws_request_id\", \"req\") if context else \"req\"\n        base_session = f\"CognitoAuth-{username}-{request_suffix}\"\n        role_session_name = base_session[:64]\n\n        return _assume_role_and_respond(sts_client, role_arn, role_session_name, duration_seconds, username, user_id)\n\n    except ClientError as e:\n        error_code = e.response[\"Error\"][\"Code\"]\n        error_message = e.response[\"Error\"][\"Message\"]\n\n        print(f\"AWS ClientError: {error_code} - {error_message}\")\n        print(f\"Full error: {e.response}\")\n\n        return _response(403, {\"error\": \"Failed to assume role\", \"message\": error_message})\n\n    except Exception as e:\n        return _response(500, {\"error\": str(e)})\n</code></pre>"},{"location":"modules/#aws_cognito_auth.lambda_function.validate_cognito_token","title":"<code>validate_cognito_token(id_token)</code>","text":"<p>Validate Cognito ID token and return claims This is a simplified version - in production, you should verify the signature</p> Source code in <code>src/aws_cognito_auth/lambda_function.py</code> <pre><code>def validate_cognito_token(id_token):\n    \"\"\"\n    Validate Cognito ID token and return claims\n    This is a simplified version - in production, you should verify the signature\n    \"\"\"\n    try:\n        parts = id_token.split(\".\")\n        if len(parts) != 3:\n            raise Exception(\"Invalid token format\")\n\n        payload = parts[1]\n        # Add padding for base64 urlsafe decoding\n        padding = \"=\" * (-len(payload) % 4)\n        try:\n            decoded_payload = base64.urlsafe_b64decode(payload + padding)\n        except Exception as e:\n            raise Exception(\"Invalid token payload\") from e\n\n        try:\n            claims = json.loads(decoded_payload)\n        except Exception as e:\n            raise Exception(\"Invalid token payload\") from e\n\n        exp = claims.get(\"exp\")\n        if exp is None or datetime.now().timestamp() &gt;= float(exp):\n            raise Exception(\"Token has expired\")\n\n        if \"sub\" not in claims:\n            raise Exception(\"Missing required field: sub\")\n\n        # token_use is optional in tests; accept if absent\n        return claims\n    except Exception:\n        raise\n</code></pre>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>Complete troubleshooting guide for common issues with the AWS Cognito Authoriser.</p>"},{"location":"troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":""},{"location":"troubleshooting/#check-system-status","title":"Check System Status","text":"<pre><code># Verify installation\ncogauth --version\ncogadmin --version\n\n# Check configuration\ncogauth status\n\n# Test AWS connectivity\naws sts get-caller-identity\n</code></pre>"},{"location":"troubleshooting/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable detailed logging\nexport BOTO_DEBUG=1\nexport LOG_LEVEL=DEBUG\ncogauth login -u test-user\n</code></pre>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"troubleshooting/#command-not-found-cogauth-or-cogadmin","title":"Command Not Found: <code>cogauth</code> or <code>cogadmin</code>","text":"<p>Symptoms:</p> <pre><code>$ cogauth --help\nbash: cogauth: command not found\n</code></pre> <p>Solutions:</p> <ol> <li>Verify Installation:</li> </ol> <pre><code>pip show aws-cognito-auth\npip list | grep aws-cognito-auth\n</code></pre> <ol> <li>Reinstall Package:</li> </ol> <pre><code>pip uninstall aws-cognito-auth\npip install -e .\n</code></pre> <ol> <li>Check PATH:</li> </ol> <pre><code>which python\npython -m pip show aws-cognito-auth\n</code></pre> <ol> <li>Use Full Path:</li> </ol> <pre><code>python -m aws_cognito_auth.client --help\npython -m aws_cognito_auth.admin --help\n</code></pre>"},{"location":"troubleshooting/#import-errors","title":"Import Errors","text":"<p>Symptoms:</p> <pre><code>ModuleNotFoundError: No module named 'aws_cognito_auth'\n</code></pre> <p>Solutions:</p> <ol> <li>Check Python Version:</li> </ol> <pre><code>python --version  # Should be 3.9+\n</code></pre> <ol> <li>Install in Virtual Environment:</li> </ol> <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# OR\nvenv\\Scripts\\activate     # Windows\npip install -e .\n</code></pre> <ol> <li>Install Dependencies:</li> </ol> <pre><code>pip install boto3 click botocore\n</code></pre>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#missing-configuration","title":"Missing Configuration","text":"<p>Symptoms:</p> <pre><code>Error: Missing required configuration. Please run 'cogauth configure' first.\n</code></pre> <p>Solutions:</p> <ol> <li>Run Interactive Configuration:</li> </ol> <pre><code>cogauth configure\n</code></pre> <ol> <li>Check Configuration File:</li> </ol> <pre><code>cat ~/.cognito-cli-config.json\n</code></pre> <ol> <li>Set Environment Variables:</li> </ol> <pre><code>export COGNITO_USER_POOL_ID=\"us-east-1_xxxxxxxxx\"\nexport COGNITO_CLIENT_ID=\"your-client-id\"\nexport COGNITO_IDENTITY_POOL_ID=\"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\nexport AWS_REGION=\"us-east-1\"\n</code></pre>"},{"location":"troubleshooting/#invalid-configuration-format","title":"Invalid Configuration Format","text":"<p>Symptoms:</p> <pre><code>JSONDecodeError: Expecting property name enclosed in double quotes\n</code></pre> <p>Solutions:</p> <ol> <li>Validate JSON Syntax:</li> </ol> <pre><code>python -m json.tool ~/.cognito-cli-config.json\n</code></pre> <ol> <li>Fix Common JSON Errors:</li> <li>Use double quotes for strings</li> <li>Remove trailing commas</li> <li> <p>Escape backslashes</p> </li> <li> <p>Recreate Configuration:</p> </li> </ol> <pre><code>rm ~/.cognito-cli-config.json\ncogauth configure\n</code></pre>"},{"location":"troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"troubleshooting/#invalid-username-or-password","title":"Invalid Username or Password","text":"<p>Symptoms:</p> <pre><code>Error: Invalid username or password\n</code></pre> <p>Solutions:</p> <ol> <li>Verify User Exists:</li> </ol> <pre><code>aws cognito-idp admin-get-user --user-pool-id us-east-1_xxxxxxxxx --username test-user\n</code></pre> <ol> <li>Check Password Requirements:</li> <li>Verify password meets User Pool policy</li> <li> <p>Check if password reset is required</p> </li> <li> <p>Test with Different User:</p> </li> </ol> <pre><code>cogauth login -u different-user\n</code></pre>"},{"location":"troubleshooting/#user-pool-configuration-error","title":"User Pool Configuration Error","text":"<p>Symptoms:</p> <pre><code>Error: User pool us-east-1_xxxxxxxxx does not exist or is not accessible\n</code></pre> <p>Solutions:</p> <ol> <li>Verify User Pool ID:</li> </ol> <pre><code>aws cognito-idp describe-user-pool --user-pool-id us-east-1_xxxxxxxxx\n</code></pre> <ol> <li>Check Region:</li> </ol> <pre><code>aws configure get region\nexport AWS_REGION=us-east-1\n</code></pre> <ol> <li>Verify AWS Credentials:</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"troubleshooting/#app-client-configuration-error","title":"App Client Configuration Error","text":"<p>Symptoms:</p> <pre><code>Error: App client does not exist or authentication flow not enabled\n</code></pre> <p>Solutions:</p> <ol> <li>Check App Client:</li> </ol> <pre><code>aws cognito-idp describe-user-pool-client --user-pool-id us-east-1_xxxxxxxxx --client-id your-client-id\n</code></pre> <ol> <li>Verify Authentication Flows:</li> <li>Enable <code>ALLOW_USER_PASSWORD_AUTH</code></li> <li> <p>Enable <code>ALLOW_REFRESH_TOKEN_AUTH</code></p> </li> <li> <p>Update Client Configuration:</p> </li> </ol> <pre><code>aws cognito-idp update-user-pool-client --user-pool-id us-east-1_xxxxxxxxx --client-id your-client-id --explicit-auth-flows ALLOW_USER_PASSWORD_AUTH ALLOW_REFRESH_TOKEN_AUTH\n</code></pre>"},{"location":"troubleshooting/#identity-pool-issues","title":"Identity Pool Issues","text":""},{"location":"troubleshooting/#identity-pool-configuration-error","title":"Identity Pool Configuration Error","text":"<p>Symptoms:</p> <pre><code>Error: Identity pool us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx does not exist\n</code></pre> <p>Solutions:</p> <ol> <li>Verify Identity Pool:</li> </ol> <pre><code>aws cognito-identity describe-identity-pool --identity-pool-id \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n</code></pre> <ol> <li>Check Authentication Providers:</li> </ol> <pre><code>aws cognito-identity get-identity-pool-configuration --identity-pool-id \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n</code></pre> <ol> <li>Set Up Identity Pool:</li> </ol> <pre><code>cogadmin setup-identity-pool\n</code></pre>"},{"location":"troubleshooting/#assumerolewithwebidentity-access-denied","title":"AssumeRoleWithWebIdentity Access Denied","text":"<p>Symptoms:</p> <pre><code>Error: User is not authorized to perform: sts:AssumeRoleWithWebIdentity\n</code></pre> <p>Solutions:</p> <ol> <li>Check Role Trust Policy:</li> </ol> <pre><code>aws iam get-role --role-name Cognito_IdentityPoolAuth_Role\n</code></pre> <ol> <li>Update Trust Policy:</li> </ol> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Federated\": \"cognito-identity.amazonaws.com\"\n            },\n            \"Action\": \"sts:AssumeRoleWithWebIdentity\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"cognito-identity.amazonaws.com:aud\": \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n                },\n                \"ForAnyValue:StringLike\": {\n                    \"cognito-identity.amazonaws.com:amr\": \"authenticated\"\n                }\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"troubleshooting/#lambda-proxy-issues","title":"Lambda Proxy Issues","text":""},{"location":"troubleshooting/#lambda-function-not-found","title":"Lambda Function Not Found","text":"<p>Symptoms:</p> <pre><code>Error: Lambda function 'cognito-credential-proxy' not found. Please deploy it first using cogadmin lambda deploy\n</code></pre> <p>Solutions:</p> <ol> <li>Deploy Lambda Function:</li> </ol> <pre><code>cogadmin lambda deploy --create-user\n</code></pre> <ol> <li>Check Function Exists:</li> </ol> <pre><code>aws lambda get-function --function-name cognito-credential-proxy\n</code></pre> <ol> <li>Skip Lambda Proxy:</li> </ol> <pre><code>cogauth login -u test-user --no-lambda-proxy\n</code></pre>"},{"location":"troubleshooting/#lambda-permission-denied","title":"Lambda Permission Denied","text":"<p>Symptoms:</p> <pre><code>Error: User is not authorized to perform: lambda:InvokeFunction\n</code></pre> <p>Solutions:</p> <ol> <li>Add Lambda Permission to Role:</li> </ol> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": \"lambda:InvokeFunction\",\n            \"Resource\": \"arn:aws:lambda:*:*:function:cognito-credential-proxy\"\n        }\n    ]\n}\n</code></pre> <ol> <li>Apply Policy:</li> </ol> <pre><code>cogadmin role apply-policy --policy-file lambda-invoke-policy.json --policy-name LambdaInvokePolicy\n</code></pre>"},{"location":"troubleshooting/#lambda-function-error","title":"Lambda Function Error","text":"<p>Symptoms:</p> <pre><code>Error: Lambda function execution failed\n</code></pre> <p>Solutions:</p> <ol> <li>Check Lambda Logs:</li> </ol> <pre><code>aws logs tail /aws/lambda/cognito-credential-proxy --follow\n</code></pre> <ol> <li>Check Environment Variables:</li> </ol> <pre><code>aws lambda get-function-configuration --function-name cognito-credential-proxy\n</code></pre> <ol> <li>Update Lambda Code:</li> </ol> <pre><code>cogadmin lambda deploy --access-key-id AKIA... --secret-access-key ...\n</code></pre>"},{"location":"troubleshooting/#common-setup-issues-and-solutions","title":"Common Setup Issues and Solutions","text":""},{"location":"troubleshooting/#issue-user-is-not-authorized-to-perform-ststagsession","title":"Issue: \"User is not authorized to perform: sts:TagSession\"","text":"<p>Cause: The long-lived role's trust policy doesn't include <code>sts:TagSession</code> action.</p> <p>Solution: Update the trust policy to include both <code>\"sts:AssumeRole\"</code> and <code>\"sts:TagSession\"</code> in the Action array.</p>"},{"location":"troubleshooting/#issue-user-is-not-authorized-to-perform-stsassumerole-on-resource","title":"Issue: \"User is not authorized to perform: sts:AssumeRole on resource\"","text":"<p>Cause: Either the IAM user doesn't have permission, or the role's trust policy doesn't allow the user.</p> <p>Solution: 1. Verify the IAM user has the <code>CognitoCredentialProxyAccess</code> policy 2. Verify the long-lived role's trust policy includes the correct user ARN</p>"},{"location":"troubleshooting/#issue-lambda-function-logs-show-missing-required-environment-variable","title":"Issue: Lambda function logs show \"Missing required environment variable\"","text":"<p>Cause: Lambda environment variables are not configured.</p> <p>Solution: Set all three environment variables (<code>IAM_USER_ACCESS_KEY_ID</code>, <code>IAM_USER_SECRET_ACCESS_KEY</code>, <code>DEFAULT_ROLE_ARN</code>) in the Lambda function configuration.</p>"},{"location":"troubleshooting/#issue-lambda-proxy-failed-lambda-error-failed-to-assume-role","title":"Issue: \"Lambda proxy failed: Lambda error: Failed to assume role\"","text":"<p>Cause: Usually a configuration mismatch between the role name in admin config and the actual IAM role.</p> <p>Solution: 1. Check your admin config file (<code>~/.cognito-admin-config.json</code>) for the correct <code>long_lived_role_name</code> 2. Verify the IAM role exists with exactly that name 3. Verify the Lambda's <code>DEFAULT_ROLE_ARN</code> environment variable matches</p>"},{"location":"troubleshooting/#testing-the-setup","title":"Testing the Setup","text":"<p>You can verify your setup with these AWS CLI commands:</p> <pre><code># Test IAM user can assume the role\nAWS_ACCESS_KEY_ID=AKIA... AWS_SECRET_ACCESS_KEY=... \\\naws sts assume-role \\\n--role-arn arn:aws:iam::ACCOUNT:role/CognitoLongLivedRole \\\n--role-session-name test-session\n\n# Test Lambda function directly\naws lambda invoke \\\n--function-name cognito-credential-proxy \\\n--payload '{\"id_token\":\"test-token\",\"duration_seconds\":7200}' \\\noutput.json\n\n# Check Lambda logs\naws logs tail /aws/lambda/cognito-credential-proxy --follow\n</code></pre>"},{"location":"troubleshooting/#aws-cli-integration-issues","title":"AWS CLI Integration Issues","text":""},{"location":"troubleshooting/#unable-to-locate-credentials","title":"Unable to Locate Credentials","text":"<p>Symptoms:</p> <pre><code>$ aws s3 ls\nUnable to locate credentials. You can configure credentials by running \"aws configure\".\n</code></pre> <p>Solutions:</p> <ol> <li>Check AWS Credentials File:</li> </ol> <pre><code>cat ~/.aws/credentials\n</code></pre> <ol> <li>Re-login with Cognito:</li> </ol> <pre><code>cogauth login -u your-username\n</code></pre> <ol> <li>Specify Profile:</li> </ol> <pre><code>aws s3 ls --profile default\n</code></pre>"},{"location":"troubleshooting/#access-denied-with-aws-commands","title":"Access Denied with AWS Commands","text":"<p>Symptoms:</p> <pre><code>$ aws s3 ls\nAn error occurred (AccessDenied) when calling the ListBuckets operation\n</code></pre> <p>Solutions:</p> <ol> <li>Check Current Identity:</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre> <ol> <li>Verify Role Permissions:</li> </ol> <pre><code>cogadmin role info\n</code></pre> <ol> <li>Add Required Permissions:</li> </ol> <pre><code>cogadmin policy create-s3-policy --bucket-name your-bucket\n</code></pre>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#slow-authentication","title":"Slow Authentication","text":"<p>Solutions:</p> <ol> <li>Use Local Configuration:</li> </ol> <pre><code># Create project-specific config\ncp ~/.cognito-cli-config.json ./cognito-cli-config.json\n</code></pre> <ol> <li>Optimize Network:</li> <li>Use appropriate AWS region</li> <li>Check network connectivity</li> <li>Use VPC endpoints if in AWS</li> </ol>"},{"location":"troubleshooting/#frequent-re-authentication","title":"Frequent Re-authentication","text":"<p>Solutions:</p> <ol> <li>Use Longer Credentials:</li> </ol> <pre><code>cogauth login -u your-username --duration 12\n</code></pre> <ol> <li>Check Credential Expiration:</li> </ol> <pre><code>aws sts get-caller-identity\n</code></pre>"},{"location":"troubleshooting/#network-and-connectivity-issues","title":"Network and Connectivity Issues","text":""},{"location":"troubleshooting/#connection-timeout","title":"Connection Timeout","text":"<p>Symptoms:</p> <pre><code>Error: Connection timed out\n</code></pre> <p>Solutions:</p> <ol> <li>Check Internet Connection:</li> </ol> <pre><code>ping cognito-idp.us-east-1.amazonaws.com\n</code></pre> <ol> <li>Verify AWS Region:</li> </ol> <pre><code>export AWS_REGION=us-east-1\n</code></pre> <ol> <li>Use Corporate Proxy:</li> </ol> <pre><code>export HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\n</code></pre>"},{"location":"troubleshooting/#ssl-certificate-errors","title":"SSL Certificate Errors","text":"<p>Solutions:</p> <ol> <li>Update CA Certificates:</li> </ol> <pre><code># Ubuntu/Debian\nsudo apt-get update &amp;&amp; sudo apt-get install ca-certificates\n\n# CentOS/RHEL\nsudo yum update ca-certificates\n</code></pre> <ol> <li>Use System CA Bundle:</li> </ol> <pre><code>export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\n</code></pre>"},{"location":"troubleshooting/#advanced-troubleshooting","title":"Advanced Troubleshooting","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># Maximum verbosity\nexport BOTO_DEBUG=1\nexport LOG_LEVEL=DEBUG\nexport PYTHONPATH=/path/to/aws-cognito-auth/src\n\n# Run with debug\npython -m aws_cognito_auth.client login -u test-user\n</code></pre>"},{"location":"troubleshooting/#capture-network-traffic","title":"Capture Network Traffic","text":"<pre><code># Install mitmproxy\npip install mitmproxy\n\n# Run with proxy\nexport HTTP_PROXY=http://localhost:8080\nexport HTTPS_PROXY=http://localhost:8080\nmitmdump --mode transparent\n</code></pre>"},{"location":"troubleshooting/#test-individual-components","title":"Test Individual Components","text":"<pre><code># Test Cognito User Pool authentication\naws cognito-idp admin-initiate-auth \\\n    --user-pool-id us-east-1_xxxxxxxxx \\\n    --client-id your-client-id \\\n    --auth-flow ADMIN_NO_SRP_AUTH \\\n    --auth-parameters USERNAME=test-user,PASSWORD=test-password\n\n# Test Identity Pool\naws cognito-identity get-id \\\n    --identity-pool-id \"us-east-1:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" \\\n    --logins cognito-idp.us-east-1.amazonaws.com/us-east-1_xxxxxxxxx=ID_TOKEN\n\n# Test credential exchange\naws cognito-identity get-credentials-for-identity \\\n    --identity-id \"us-east-1:12345678-1234-1234-1234-123456789012\" \\\n    --logins cognito-idp.us-east-1.amazonaws.com/us-east-1_xxxxxxxxx=ID_TOKEN\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"troubleshooting/#documentation","title":"Documentation","text":"<ul> <li>Installation Guide</li> <li>Usage Guide</li> <li>AWS Setup</li> <li>Configuration</li> </ul>"},{"location":"troubleshooting/#support-channels","title":"Support Channels","text":"<ul> <li>GitHub Issues: https://github.com/jiahao1553/aws-cognito-auth/issues</li> <li>Documentation: https://jiahao1553.github.io/aws-cognito-auth/</li> </ul>"},{"location":"troubleshooting/#providing-debug-information","title":"Providing Debug Information","text":"<p>When reporting issues, include:</p> <ol> <li>System Information:</li> </ol> <pre><code>python --version\npip show aws-cognito-auth\naws --version\n</code></pre> <ol> <li>Configuration (sanitized):</li> </ol> <pre><code># Remove sensitive values before sharing\ncat ~/.cognito-cli-config.json\n</code></pre> <ol> <li>Error Output:</li> </ol> <pre><code># Full command and error output\ncogauth login -u test-user 2&gt;&amp;1\n</code></pre> <ol> <li>Debug Logs:</li> </ol> <pre><code># Run with debug mode\nBOTO_DEBUG=1 cogauth login -u test-user &gt; debug.log 2&gt;&amp;1\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":"<p>Complete guide to using the AWS Cognito Authoriser CLI commands.</p>"},{"location":"usage/#authentication-client-cogauth","title":"Authentication Client (<code>cogauth</code>)","text":"<p>The primary tool for authenticating and obtaining AWS credentials.</p>"},{"location":"usage/#basic-commands","title":"Basic Commands","text":""},{"location":"usage/#check-status","title":"Check Status","text":"<pre><code>cogauth status\n</code></pre> <p>Shows current configuration and authentication status.</p>"},{"location":"usage/#configure-settings","title":"Configure Settings","text":"<pre><code>cogauth configure\n</code></pre> <p>Interactive configuration of Cognito settings.</p>"},{"location":"usage/#login","title":"Login","text":"<pre><code># Login with username prompt\ncogauth login\n\n# Login with specific username\ncogauth login -u your-username\n\n# Login with specific AWS profile\ncogauth login -u your-username --profile my-profile\n\n# Skip Lambda proxy (use only 1-hour Identity Pool credentials)\ncogauth login -u your-username --no-lambda-proxy\n\n# Set credential duration for Lambda proxy (1-12 hours)\ncogauth login -u your-username --duration 8\n</code></pre>"},{"location":"usage/#command-options","title":"Command Options","text":"Option Description Default <code>-u, --username</code> Username for authentication Prompt <code>--profile</code> AWS profile to update <code>default</code> <code>--no-lambda-proxy</code> Skip Lambda credential upgrade False <code>--duration</code> Credential duration in hours (Lambda only) 12"},{"location":"usage/#example-workflow","title":"Example Workflow","text":"<pre><code># 1. Configure once\ncogauth configure\n\n# 2. Login and get credentials\ncogauth login -u myuser\n\n# Sample output:\n# \ud83c\udfab Getting temporary credentials from Cognito Identity Pool...\n# \u2705 Successfully obtained Identity Pool credentials (expires at 2025-08-12 14:30:00 PST)\n# \ud83c\udfab Attempting to upgrade to longer-lived credentials via Lambda proxy...\n# \u2705 Successfully upgraded to longer-lived credentials (expires at 2025-08-13 01:30:00 PST)\n\n# 3. Use AWS CLI commands normally\naws s3 ls\naws sts get-caller-identity\naws s3 sync s3://my-bucket/my-folder ./local-folder\n</code></pre>"},{"location":"usage/#administrative-tool-cogadmin","title":"Administrative Tool (<code>cogadmin</code>)","text":"<p>Tool for managing AWS infrastructure and policies.</p>"},{"location":"usage/#role-management","title":"Role Management","text":""},{"location":"usage/#view-role-information","title":"View Role Information","text":"<pre><code>cogadmin role info\n</code></pre> <p>Displays current Identity Pool role configuration and permissions.</p>"},{"location":"usage/#apply-custom-policies","title":"Apply Custom Policies","text":"<pre><code>cogadmin role apply-policy --policy-file custom-policy.json --policy-name MyPolicy\n</code></pre>"},{"location":"usage/#policy-management","title":"Policy Management","text":""},{"location":"usage/#s3-policies","title":"S3 Policies","text":"<pre><code># Create S3 policy with full bucket access\ncogadmin policy create-s3-policy --bucket-name my-bucket\n\n# Create S3 policy with user isolation (recommended)\ncogadmin policy create-s3-policy --bucket-name my-bucket --user-specific\n</code></pre>"},{"location":"usage/#dynamodb-policies","title":"DynamoDB Policies","text":"<pre><code># Create DynamoDB policy with user isolation\ncogadmin policy create-dynamodb-policy --table-name my-table\n</code></pre>"},{"location":"usage/#infrastructure-deployment","title":"Infrastructure Deployment","text":""},{"location":"usage/#lambda-proxy-setup","title":"Lambda Proxy Setup","text":"<pre><code># Deploy with new IAM user (requires elevated permissions)\ncogadmin lambda deploy --create-user\n\n# Deploy with existing IAM user credentials\ncogadmin lambda deploy --access-key-id AKIA... --secret-access-key ...\n</code></pre>"},{"location":"usage/#identity-pool-setup","title":"Identity Pool Setup","text":"<pre><code># Interactive Identity Pool setup\ncogadmin setup-identity-pool\n</code></pre>"},{"location":"usage/#configuration-management","title":"Configuration Management","text":"<pre><code># Interactive admin configuration\ncogadmin configure\n</code></pre>"},{"location":"usage/#multiple-environment-usage","title":"Multiple Environment Usage","text":""},{"location":"usage/#different-aws-profiles","title":"Different AWS Profiles","text":"<pre><code># Development environment\ncogauth login -u dev-user --profile development\n\n# Production environment\ncogauth login -u prod-user --profile production\n\n# Use with specific profiles\naws --profile development s3 ls\naws --profile production s3 ls\n</code></pre>"},{"location":"usage/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<p>Create separate config files for different environments:</p> <p>Development (<code>~/.cognito-cli-config-dev.json</code>):</p> <pre><code>{\n    \"user_pool_id\": \"us-east-1_devpool123\",\n    \"client_id\": \"dev-client-id\",\n    \"identity_pool_id\": \"us-east-1:dev-identity-pool-id\",\n    \"region\": \"us-east-1\"\n}\n</code></pre> <p>Production (<code>~/.cognito-cli-config-prod.json</code>):</p> <pre><code>{\n    \"user_pool_id\": \"us-east-1_prodpool456\",\n    \"client_id\": \"prod-client-id\",\n    \"identity_pool_id\": \"us-east-1:prod-identity-pool-id\",\n    \"region\": \"us-east-1\"\n}\n</code></pre> <p>Switch between environments using environment variables or by copying the appropriate config file.</p>"},{"location":"usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/#credential-duration-options","title":"Credential Duration Options","text":"Duration Method Max Hours Use Case Short Identity Pool only 1 Quick tasks, testing Medium Lambda proxy 4-8 Development work Long Lambda proxy 12 Long-running processes"},{"location":"usage/#automation-and-scripts","title":"Automation and Scripts","text":"<pre><code>#!/bin/bash\n# Automated login script\ncogauth login -u automated-user --profile automation\n\n# Run AWS commands\naws s3 sync s3://data-bucket/input ./data/\npython process_data.py\naws s3 sync ./data/output s3://data-bucket/output/\n</code></pre>"},{"location":"usage/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Use user-specific policies when possible</li> <li>Set appropriate credential durations</li> <li>Use separate environments for dev/prod</li> <li>Monitor credential usage via CloudTrail</li> <li>Rotate Cognito user passwords regularly</li> </ol>"},{"location":"usage/#common-use-cases","title":"Common Use Cases","text":""},{"location":"usage/#data-processing-pipeline","title":"Data Processing Pipeline","text":"<pre><code># Get long-lived credentials for batch processing\ncogauth login -u batch-processor --duration 12 --profile batch\n\n# Process data\naws --profile batch s3 cp s3://input-bucket/data.csv ./\npython process_large_dataset.py\naws --profile batch s3 cp results.csv s3://output-bucket/\n</code></pre>"},{"location":"usage/#development-workflow","title":"Development Workflow","text":"<pre><code># Daily development login\ncogauth login -u developer --duration 8 --profile dev\n\n# Regular development tasks\naws --profile dev s3 ls\naws --profile dev lambda invoke --function-name my-function\n</code></pre>"},{"location":"usage/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># In CI pipeline\nexport COGNITO_USER_POOL_ID=\"${DEV_USER_POOL_ID}\"\nexport COGNITO_CLIENT_ID=\"${DEV_CLIENT_ID}\"\nexport COGNITO_IDENTITY_POOL_ID=\"${DEV_IDENTITY_POOL_ID}\"\n\ncogauth login -u ci-user --profile ci --no-lambda-proxy\naws --profile ci s3 sync build/ s3://deployment-bucket/\n</code></pre>"},{"location":"usage/#help-and-documentation","title":"Help and Documentation","text":"<pre><code># Get help for main commands\ncogauth --help\ncogadmin --help\n\n# Get help for specific subcommands\ncogadmin role --help\ncogadmin policy --help\ncogadmin lambda --help\n</code></pre>"}]}